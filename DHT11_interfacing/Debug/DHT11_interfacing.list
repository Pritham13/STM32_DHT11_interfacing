
DHT11_interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007784  08007784  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800778c  0800778c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  200000fc  08007890  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001570  08007890  00021570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e47  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003056  00000000  00000000  00031fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00035010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb7  00000000  00000000  000360c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001883d  00000000  00000000  00036d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144f9  00000000  00000000  0004f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e598  00000000  00000000  00063aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004578  00000000  00000000  000f2048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f65c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007714 	.word	0x08007714

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08007714 	.word	0x08007714

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Set_Pin_Output>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_Pin_Output(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <Set_Pin_Output+0x7c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a17      	ldr	r2, [pc, #92]	; (800054c <Set_Pin_Output+0x7c>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <Set_Pin_Output+0x7c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <Set_Pin_Output+0x7c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <Set_Pin_Output+0x7c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <Set_Pin_Output+0x7c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2101      	movs	r1, #1
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <Set_Pin_Output+0x80>)
 8000524:	f000 fde4 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = DHT11_PIN;
 8000528:	2301      	movs	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <Set_Pin_Output+0x80>)
 8000540:	f000 fc3a 	bl	8000db8 <HAL_GPIO_Init>
}
 8000544:	bf00      	nop
 8000546:	3720      	adds	r7, #32
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000

08000554 <Set_Pin_Input>:
void Set_Pin_Input(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <Set_Pin_Input+0x8c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <Set_Pin_Input+0x8c>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <Set_Pin_Input+0x8c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <Set_Pin_Input+0x8c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <Set_Pin_Input+0x8c>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <Set_Pin_Input+0x8c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <Set_Pin_Input+0x8c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <Set_Pin_Input+0x8c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <Set_Pin_Input+0x8c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = DHT11_PIN;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <Set_Pin_Input+0x90>)
 80005d2:	f000 fbf1 	bl	8000db8 <HAL_GPIO_Init>
}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <microsecond_delay>:
void microsecond_delay (uint16_t us)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <microsecond_delay+0x30>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80005fa:	bf00      	nop
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <microsecond_delay+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	429a      	cmp	r2, r3
 8000606:	d3f9      	bcc.n	80005fc <microsecond_delay+0x14>
}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000118 	.word	0x20000118

0800061c <Sensor_start>:
void Sensor_start (void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	Set_Pin_Output ();  // set the pin as output
 8000620:	f7ff ff56 	bl	80004d0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000624:	2200      	movs	r2, #0
 8000626:	2101      	movs	r1, #1
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <Sensor_start+0x24>)
 800062a:	f000 fd61 	bl	80010f0 <HAL_GPIO_WritePin>
	microsecond_delay (18000);   // wait for 18ms
 800062e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000632:	f7ff ffd9 	bl	80005e8 <microsecond_delay>
	Set_Pin_Input();    // set as input
 8000636:	f7ff ff8d 	bl	8000554 <Set_Pin_Input>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000

08000644 <Sensor_response>:
uint8_t Sensor_response (void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	71fb      	strb	r3, [r7, #7]
	microsecond_delay (40);
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f7ff ffca 	bl	80005e8 <microsecond_delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000654:	2101      	movs	r1, #1
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <Sensor_response+0x58>)
 8000658:	f000 fd32 	bl	80010c0 <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10e      	bne.n	8000680 <Sensor_response+0x3c>
	{
		microsecond_delay (80);
 8000662:	2050      	movs	r0, #80	; 0x50
 8000664:	f7ff ffc0 	bl	80005e8 <microsecond_delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000668:	2101      	movs	r1, #1
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <Sensor_response+0x58>)
 800066c:	f000 fd28 	bl	80010c0 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <Sensor_response+0x38>
 8000676:	2301      	movs	r3, #1
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e001      	b.n	8000680 <Sensor_response+0x3c>
		else Response = -1;
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000680:	bf00      	nop
 8000682:	2101      	movs	r1, #1
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <Sensor_response+0x58>)
 8000686:	f000 fd1b 	bl	80010c0 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f8      	bne.n	8000682 <Sensor_response+0x3e>

	return Response;
 8000690:	79fb      	ldrb	r3, [r7, #7]
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000

080006a0 <Read_data>:
uint8_t Read_data (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e035      	b.n	8000718 <Read_data+0x78>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 80006ac:	bf00      	nop
 80006ae:	2101      	movs	r1, #1
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <Read_data+0x88>)
 80006b2:	f000 fd05 	bl	80010c0 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f8      	beq.n	80006ae <Read_data+0xe>
		microsecond_delay (40);   // wait for 40 us
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f7ff ff93 	bl	80005e8 <microsecond_delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80006c2:	2101      	movs	r1, #1
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <Read_data+0x88>)
 80006c6:	f000 fcfb 	bl	80010c0 <HAL_GPIO_ReadPin>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10c      	bne.n	80006ea <Read_data+0x4a>
		{
			i^= read_bits(j);   // write 0
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2201      	movs	r2, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	b25a      	sxtb	r2, r3
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	4053      	eors	r3, r2
 80006e4:	b25b      	sxtb	r3, r3
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	e00b      	b.n	8000702 <Read_data+0x62>
		}
		else i|= read_bits(j);;  // if the pin is high, write 1
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	f1c3 0307 	rsb	r3, r3, #7
 80006f0:	2201      	movs	r2, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b25b      	sxtb	r3, r3
 8000700:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000702:	bf00      	nop
 8000704:	2101      	movs	r1, #1
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <Read_data+0x88>)
 8000708:	f000 fcda 	bl	80010c0 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1f8      	bne.n	8000704 <Read_data+0x64>
	for (j=0;j<8;j++)
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	3301      	adds	r3, #1
 8000716:	71bb      	strb	r3, [r7, #6]
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	2b07      	cmp	r3, #7
 800071c:	d9c6      	bls.n	80006ac <Read_data+0xc>
	}
	return i;
 800071e:	79fb      	ldrb	r3, [r7, #7]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020000 	.word	0x40020000

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  Sensor_start();
 8000730:	f7ff ff74 	bl	800061c <Sensor_start>
  HAL_TIM_Base_Start(&htim1);
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <main+0x40>)
 8000736:	f002 fbf1 	bl	8002f1c <HAL_TIM_Base_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 f995 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f817 	bl	8000770 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  MX_GPIO_Init();
  MX_TIM1_Init();
 8000742:	f000 f881 	bl	8000848 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000746:	f006 faa9 	bl	8006c9c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  if (Sensor_response())
 800074a:	f7ff ff7b 	bl	8000644 <Sensor_response>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0fa      	beq.n	800074a <main+0x1e>
  { 
    CDC_Transmit_FS(Read_data(),8);
 8000754:	f7ff ffa4 	bl	80006a0 <Read_data>
 8000758:	4603      	mov	r3, r0
 800075a:	2108      	movs	r1, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f006 fb5b 	bl	8006e18 <CDC_Transmit_FS>
    HAL_Delay(1000);
 8000762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000766:	f000 f9f1 	bl	8000b4c <HAL_Delay>
  if (Sensor_response())
 800076a:	e7ee      	b.n	800074a <main+0x1e>
 800076c:	20000118 	.word	0x20000118

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f006 ff9c 	bl	80076bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <SystemClock_Config+0xd0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd4>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007e4:	2319      	movs	r3, #25
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 ff0e 	bl	800261c <HAL_RCC_OscConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000806:	f000 f86f 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080a:	230f      	movs	r3, #15
 800080c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080e:	2302      	movs	r3, #2
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2102      	movs	r1, #2
 8000826:	4618      	mov	r0, r3
 8000828:	f002 f970 	bl	8002b0c <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000832:	f000 f859 	bl	80008e8 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3750      	adds	r7, #80	; 0x50
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	463b      	mov	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000866:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <MX_TIM1_Init+0x9c>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_TIM1_Init+0x98>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <MX_TIM1_Init+0x98>)
 8000892:	f002 faf3 	bl	8002e7c <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f824 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM1_Init+0x98>)
 80008ae:	f002 fb8f 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008b8:	f000 f816 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_TIM1_Init+0x98>)
 80008ca:	f002 fd63 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008d4:	f000 f808 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000118 	.word	0x20000118
 80008e4:	40010000 	.word	0x40010000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <HAL_TIM_Base_MspInit+0x3c>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d10d      	bne.n	8000972 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x40>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x40>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_TIM_Base_MspInit+0x40>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40010000 	.word	0x40010000
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f89a 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <OTG_FS_IRQHandler+0x10>)
 80009e2:	f000 fcee 	bl	80013c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000e44 	.word	0x20000e44

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a30:	4c0b      	ldr	r4, [pc, #44]	; (8000a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3e:	f7ff ffd7 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f006 fe43 	bl	80076cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fe71 	bl	800072c <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a58:	08007794 	.word	0x08007794
  ldr r2, =_sbss
 8000a5c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a60:	20001570 	.word	0x20001570

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f94f 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff ff2a 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f967 	bl	8000d9e <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f92f 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000160 	.word	0x20000160

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000160 	.word	0x20000160

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	db0b      	blt.n	8000c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 021f 	and.w	r2, r3, #31
 8000c10:	4907      	ldr	r1, [pc, #28]	; (8000c30 <__NVIC_EnableIRQ+0x38>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	2001      	movs	r0, #1
 8000c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e100 	.word	0xe000e100

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff29 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff3e 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff31 	bl	8000bf8 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa2 	bl	8000cf0 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e159      	b.n	8001088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8148 	bne.w	8001082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a2 	beq.w	8001082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x202>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fe>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fa>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a46      	ldr	r2, [pc, #280]	; (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1f6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <HAL_GPIO_Init+0x300>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1f2>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_GPIO_Init+0x304>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <HAL_GPIO_Init+0x304>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <HAL_GPIO_Init+0x304>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_GPIO_Init+0x304>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_GPIO_Init+0x304>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1a      	ldr	r2, [pc, #104]	; (80010bc <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_GPIO_Init+0x304>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f aea2 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800110c:	e003      	b.n	8001116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	041a      	lsls	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	619a      	str	r2, [r3, #24]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001124:	b08f      	sub	sp, #60	; 0x3c
 8001126:	af0a      	add	r7, sp, #40	; 0x28
 8001128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e10f      	b.n	8001354 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f005 ffaa 	bl	80070a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fa91 	bl	800369a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	687e      	ldr	r6, [r7, #4]
 8001180:	466d      	mov	r5, sp
 8001182:	f106 0410 	add.w	r4, r6, #16
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800118c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001192:	e885 0003 	stmia.w	r5, {r0, r1}
 8001196:	1d33      	adds	r3, r6, #4
 8001198:	cb0e      	ldmia	r3, {r1, r2, r3}
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f002 f968 	bl	8003470 <USB_CoreInit>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2202      	movs	r2, #2
 80011aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0d0      	b.n	8001354 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fa7f 	bl	80036bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e04a      	b.n	800125a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	333d      	adds	r3, #61	; 0x3d
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	333c      	adds	r3, #60	; 0x3c
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	b298      	uxth	r0, r3
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	3344      	adds	r3, #68	; 0x44
 8001200:	4602      	mov	r2, r0
 8001202:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3340      	adds	r3, #64	; 0x40
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001218:	7bfa      	ldrb	r2, [r7, #15]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	3348      	adds	r3, #72	; 0x48
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	334c      	adds	r3, #76	; 0x4c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	3354      	adds	r3, #84	; 0x54
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	3301      	adds	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	429a      	cmp	r2, r3
 8001262:	d3af      	bcc.n	80011c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e044      	b.n	80012f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	3301      	adds	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3b5      	bcc.n	800126a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	687e      	ldr	r6, [r7, #4]
 8001306:	466d      	mov	r5, sp
 8001308:	f106 0410 	add.w	r4, r6, #16
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001314:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001318:	e885 0003 	stmia.w	r5, {r0, r1}
 800131c:	1d33      	adds	r3, r6, #4
 800131e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f002 fa17 	bl	8003754 <USB_DevInit>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d005      	beq.n	8001338 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e00d      	b.n	8001354 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f003 fb66 	bl	8004a1e <USB_DevDisconnect>

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800135c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_PCD_Start+0x1c>
 8001374:	2302      	movs	r3, #2
 8001376:	e020      	b.n	80013ba <HAL_PCD_Start+0x5e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	2b01      	cmp	r3, #1
 8001386:	d109      	bne.n	800139c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 f969 	bl	8003678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fb16 	bl	80049dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013c2:	b590      	push	{r4, r7, lr}
 80013c4:	b08d      	sub	sp, #52	; 0x34
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f003 fbd4 	bl	8004b86 <USB_GetMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 848a 	bne.w	8001cfa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fb38 	bl	8004a60 <USB_ReadInterrupts>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8480 	beq.w	8001cf8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fb25 	bl	8004a60 <USB_ReadInterrupts>
 8001416:	4603      	mov	r3, r0
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b02      	cmp	r3, #2
 800141e:	d107      	bne.n	8001430 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f002 0202 	and.w	r2, r2, #2
 800142e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fb13 	bl	8004a60 <USB_ReadInterrupts>
 800143a:	4603      	mov	r3, r0
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b10      	cmp	r3, #16
 8001442:	d161      	bne.n	8001508 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699a      	ldr	r2, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0210 	bic.w	r2, r2, #16
 8001452:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	f003 020f 	and.w	r2, r3, #15
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	0c5b      	lsrs	r3, r3, #17
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	2b02      	cmp	r3, #2
 800147e:	d124      	bne.n	80014ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d035      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800149a:	b29b      	uxth	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f003 f94a 	bl	8004738 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b0:	441a      	add	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c2:	441a      	add	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	621a      	str	r2, [r3, #32]
 80014c8:	e016      	b.n	80014f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	0c5b      	lsrs	r3, r3, #17
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d110      	bne.n	80014f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014dc:	2208      	movs	r2, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	6a38      	ldr	r0, [r7, #32]
 80014e2:	f003 f929 	bl	8004738 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014f2:	441a      	add	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0210 	orr.w	r2, r2, #16
 8001506:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 faa7 	bl	8004a60 <USB_ReadInterrupts>
 8001512:	4603      	mov	r3, r0
 8001514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800151c:	f040 80a7 	bne.w	800166e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 faac 	bl	8004a86 <USB_ReadDevAllOutEpInterrupt>
 800152e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001530:	e099      	b.n	8001666 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 808e 	beq.w	800165a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fad0 	bl	8004aee <USB_ReadDevOutEPInterrupt>
 800154e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00c      	beq.n	8001574 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	015a      	lsls	r2, r3, #5
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001566:	461a      	mov	r2, r3
 8001568:	2301      	movs	r3, #1
 800156a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800156c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fec2 	bl	80022f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00c      	beq.n	8001598 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	4413      	add	r3, r2
 8001586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800158a:	461a      	mov	r2, r3
 800158c:	2308      	movs	r3, #8
 800158e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 ff98 	bl	80024c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	015a      	lsls	r2, r3, #5
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ae:	461a      	mov	r2, r3
 80015b0:	2310      	movs	r3, #16
 80015b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d030      	beq.n	8001620 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	2b80      	cmp	r3, #128	; 0x80
 80015c8:	d109      	bne.n	80015de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	3304      	adds	r3, #4
 80015f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	78db      	ldrb	r3, [r3, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	2200      	movs	r2, #0
 8001600:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f005 fe49 	bl	80072a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	015a      	lsls	r2, r3, #5
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800161a:	461a      	mov	r2, r3
 800161c:	2302      	movs	r3, #2
 800161e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	4413      	add	r3, r2
 8001632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001636:	461a      	mov	r2, r3
 8001638:	2320      	movs	r3, #32
 800163a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001652:	461a      	mov	r2, r3
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	3301      	adds	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f af62 	bne.w	8001532 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f9f4 	bl	8004a60 <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001682:	f040 80db 	bne.w	800183c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fa15 	bl	8004aba <USB_ReadDevAllInEpInterrupt>
 8001690:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001696:	e0cd      	b.n	8001834 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80c2 	beq.w	8001828 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fa3b 	bl	8004b2a <USB_ReadDevInEPInterrupt>
 80016b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d057      	beq.n	8001770 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	2201      	movs	r2, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	69f9      	ldr	r1, [r7, #28]
 80016dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016e0:	4013      	ands	r3, r2
 80016e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	015a      	lsls	r2, r3, #5
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f0:	461a      	mov	r2, r3
 80016f2:	2301      	movs	r3, #1
 80016f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d132      	bne.n	8001764 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	334c      	adds	r3, #76	; 0x4c
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4403      	add	r3, r0
 800171e:	3348      	adds	r3, #72	; 0x48
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4419      	add	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001728:	4613      	mov	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4403      	add	r3, r0
 8001732:	334c      	adds	r3, #76	; 0x4c
 8001734:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	2b00      	cmp	r3, #0
 800173a:	d113      	bne.n	8001764 <HAL_PCD_IRQHandler+0x3a2>
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3354      	adds	r3, #84	; 0x54
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800175c:	461a      	mov	r2, r3
 800175e:	2101      	movs	r1, #1
 8001760:	f003 fa42 	bl	8004be8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	b2db      	uxtb	r3, r3
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f005 fd1d 	bl	80071aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001786:	461a      	mov	r2, r3
 8001788:	2308      	movs	r3, #8
 800178a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a2:	461a      	mov	r2, r3
 80017a4:	2310      	movs	r3, #16
 80017a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	015a      	lsls	r2, r3, #5
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017be:	461a      	mov	r2, r3
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d023      	beq.n	8001816 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d0:	6a38      	ldr	r0, [r7, #32]
 80017d2:	f002 f923 	bl	8003a1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3338      	adds	r3, #56	; 0x38
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	3304      	adds	r3, #4
 80017e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2200      	movs	r2, #0
 80017f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f005 fd60 	bl	80072c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001810:	461a      	mov	r2, r3
 8001812:	2302      	movs	r3, #2
 8001814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 fcdb 	bl	80021de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	3301      	adds	r3, #1
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f af2e 	bne.w	8001698 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 f90d 	bl	8004a60 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800184c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001850:	d122      	bne.n	8001898 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001878:	2100      	movs	r1, #0
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 fec2 	bl	8002604 <HAL_PCDEx_LPM_Callback>
 8001880:	e002      	b.n	8001888 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f005 fcfe 	bl	8007284 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001896:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f003 f8df 	bl	8004a60 <USB_ReadInterrupts>
 80018a2:	4603      	mov	r3, r0
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ac:	d112      	bne.n	80018d4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d102      	bne.n	80018c4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f005 fcba 	bl	8007238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018d2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 f8c1 	bl	8004a60 <USB_ReadInterrupts>
 80018de:	4603      	mov	r3, r0
 80018e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e8:	f040 80b7 	bne.w	8001a5a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2110      	movs	r1, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f888 	bl	8003a1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001910:	e046      	b.n	80019a0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	015a      	lsls	r2, r3, #5
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	4413      	add	r3, r2
 800191a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191e:	461a      	mov	r2, r3
 8001920:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001924:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	0151      	lsls	r1, r2, #5
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	440a      	add	r2, r1
 800193c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001944:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	4413      	add	r3, r2
 800194e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001952:	461a      	mov	r2, r3
 8001954:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001958:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	4413      	add	r3, r2
 8001962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	0151      	lsls	r1, r2, #5
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	440a      	add	r2, r1
 8001970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001974:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001978:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198a:	0151      	lsls	r1, r2, #5
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	440a      	add	r2, r1
 8001990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001994:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001998:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	3301      	adds	r3, #1
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3b3      	bcc.n	8001912 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80019bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d6:	f043 030b 	orr.w	r3, r3, #11
 80019da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ec:	f043 030b 	orr.w	r3, r3, #11
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	e015      	b.n	8001a20 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a06:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a0a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1a:	f043 030b 	orr.w	r3, r3, #11
 8001a1e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a32:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a44:	461a      	mov	r2, r3
 8001a46:	f003 f8cf 	bl	8004be8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fffe 	bl	8004a60 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6e:	d124      	bne.n	8001aba <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f894 	bl	8004ba2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 f849 	bl	8003b16 <USB_GetDevSpeed>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681c      	ldr	r4, [r3, #0]
 8001a90:	f001 f9e8 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8001a94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f001 fd48 	bl	8003534 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f005 fba8 	bl	80071fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 ffce 	bl	8004a60 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d10a      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f005 fb85 	bl	80071de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f002 0208 	and.w	r2, r2, #8
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 ffb9 	bl	8004a60 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af4:	2b80      	cmp	r3, #128	; 0x80
 8001af6:	d122      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e014      	b.n	8001b34 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	4613      	mov	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4619      	mov	r1, r3
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fb27 	bl	800217c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d3e5      	bcc.n	8001b0a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff8c 	bl	8004a60 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b52:	d13b      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b54:	2301      	movs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	e02b      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	015a      	lsls	r2, r3, #5
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	4413      	add	r3, r2
 8001b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	3340      	adds	r3, #64	; 0x40
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d115      	bne.n	8001bac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da12      	bge.n	8001bac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	333f      	adds	r3, #63	; 0x3f
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fae8 	bl	800217c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3ce      	bcc.n	8001b5a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 ff45 	bl	8004a60 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001be0:	d155      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
 8001be6:	e045      	b.n	8001c74 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d12e      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c10:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da2b      	bge.n	8001c6e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001c22:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d121      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6053      	str	r3, [r2, #4]
            break;
 8001c6c:	e007      	b.n	8001c7e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	3301      	adds	r3, #1
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3b4      	bcc.n	8001be8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fee4 	bl	8004a60 <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca2:	d10a      	bne.n	8001cba <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f005 fb1f 	bl	80072e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fece 	bl	8004a60 <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d115      	bne.n	8001cfa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f005 fb0f 	bl	8007304 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	e000      	b.n	8001cfa <HAL_PCD_IRQHandler+0x938>
      return;
 8001cf8:	bf00      	nop
    }
  }
}
 8001cfa:	3734      	adds	r7, #52	; 0x34
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_PCD_SetAddress+0x1a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e013      	b.n	8001d42 <HAL_PCD_SetAddress+0x42>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fe2c 	bl	8004990 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	4608      	mov	r0, r1
 8001d54:	4611      	mov	r1, r2
 8001d56:	461a      	mov	r2, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	70fb      	strb	r3, [r7, #3]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	803b      	strh	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	da0f      	bge.n	8001d90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	705a      	strb	r2, [r3, #1]
 8001d8e:	e00f      	b.n	8001db0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	3304      	adds	r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001dbc:	883a      	ldrh	r2, [r7, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	78ba      	ldrb	r2, [r7, #2]
 8001dc6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d004      	beq.n	8001dda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dda:	78bb      	ldrb	r3, [r7, #2]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d102      	bne.n	8001de6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_EP_Open+0xaa>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e00e      	b.n	8001e12 <HAL_PCD_EP_Open+0xc8>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 feac 	bl	8003b60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001e10:	7afb      	ldrb	r3, [r7, #11]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da0f      	bge.n	8001e4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	3338      	adds	r3, #56	; 0x38
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	3304      	adds	r3, #4
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00f      	b.n	8001e6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_PCD_EP_Close+0x6e>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e00e      	b.n	8001ea6 <HAL_PCD_EP_Close+0x8c>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68f9      	ldr	r1, [r7, #12]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 feea 	bl	8003c70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	7afb      	ldrb	r3, [r7, #11]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2200      	movs	r2, #0
 8001eee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d102      	bne.n	8001f0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	6979      	ldr	r1, [r7, #20]
 8001f22:	f002 f9c9 	bl	80042b8 <USB_EP0StartXfer>
 8001f26:	e008      	b.n	8001f3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	6979      	ldr	r1, [r7, #20]
 8001f36:	f001 ff77 	bl	8003e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 020f 	and.w	r2, r3, #15
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	460b      	mov	r3, r1
 8001f82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	3338      	adds	r3, #56	; 0x38
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d102      	bne.n	8001fce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d109      	bne.n	8001fec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	6979      	ldr	r1, [r7, #20]
 8001fe6:	f002 f967 	bl	80042b8 <USB_EP0StartXfer>
 8001fea:	e008      	b.n	8001ffe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	f001 ff15 	bl	8003e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 020f 	and.w	r2, r3, #15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d901      	bls.n	8002026 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e050      	b.n	80020c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da0f      	bge.n	800204e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	3338      	adds	r3, #56	; 0x38
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	705a      	strb	r2, [r3, #1]
 800204c:	e00d      	b.n	800206a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	b2da      	uxtb	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_PCD_EP_SetStall+0x82>
 8002086:	2302      	movs	r3, #2
 8002088:	e01e      	b.n	80020c8 <HAL_PCD_EP_SetStall+0xc0>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 fba5 	bl	80047e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020b8:	461a      	mov	r2, r3
 80020ba:	f002 fd95 	bl	8004be8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d901      	bls.n	80020ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e042      	b.n	8002174 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	da0f      	bge.n	8002116 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	f003 020f 	and.w	r2, r3, #15
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	3338      	adds	r3, #56	; 0x38
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	705a      	strb	r2, [r3, #1]
 8002114:	e00f      	b.n	8002136 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	3304      	adds	r3, #4
 800212e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_PCD_EP_ClrStall+0x86>
 8002152:	2302      	movs	r3, #2
 8002154:	e00e      	b.n	8002174 <HAL_PCD_EP_ClrStall+0xa4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68f9      	ldr	r1, [r7, #12]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fbad 	bl	80048c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002188:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800218c:	2b00      	cmp	r3, #0
 800218e:	da0c      	bge.n	80021aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	f003 020f 	and.w	r2, r3, #15
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	3338      	adds	r3, #56	; 0x38
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	3304      	adds	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e00c      	b.n	80021c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	3304      	adds	r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68f9      	ldr	r1, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 f9cc 	bl	8004568 <USB_EPStopXfer>
 80021d0:	4603      	mov	r3, r0
 80021d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021d4:	7afb      	ldrb	r3, [r7, #11]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	429a      	cmp	r2, r3
 8002210:	d901      	bls.n	8002216 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06c      	b.n	80022f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	d902      	bls.n	8002232 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3303      	adds	r3, #3
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223a:	e02b      	b.n	8002294 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d902      	bls.n	8002258 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3303      	adds	r3, #3
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6919      	ldr	r1, [r3, #16]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002270:	b2db      	uxtb	r3, r3
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f002 fa20 	bl	80046bc <USB_WritePacket>

    ep->xfer_buff  += len;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	441a      	add	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d809      	bhi.n	80022be <PCD_WriteEmptyTxFifo+0xe0>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d203      	bcs.n	80022be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1be      	bne.n	800223c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d811      	bhi.n	80022ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ea:	4013      	ands	r3, r2
 80022ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d17b      	bne.n	8002426 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d015      	beq.n	8002364 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f240 80b9 	bls.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80b3 	beq.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235a:	461a      	mov	r2, r3
 800235c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002360:	6093      	str	r3, [r2, #8]
 8002362:	e0a7      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	2320      	movs	r3, #32
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	e098      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8093 	bne.w	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d90f      	bls.n	80023b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b2:	6093      	str	r3, [r2, #8]
 80023b4:	e07e      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	0159      	lsls	r1, r3, #5
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e2:	1ad2      	subs	r2, r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d114      	bne.n	8002418 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002400:	461a      	mov	r2, r3
 8002402:	2101      	movs	r1, #1
 8002404:	f002 fbf0 	bl	8004be8 <USB_EP0_OutStart>
 8002408:	e006      	b.n	8002418 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f004 fea8 	bl	8007174 <HAL_PCD_DataOutStageCallback>
 8002424:	e046      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d124      	bne.n	8002478 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800244a:	6093      	str	r3, [r2, #8]
 800244c:	e032      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	2320      	movs	r3, #32
 8002468:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f004 fe7f 	bl	8007174 <HAL_PCD_DataOutStageCallback>
 8002476:	e01d      	b.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d108      	bne.n	80024a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024a0:	461a      	mov	r2, r3
 80024a2:	2100      	movs	r1, #0
 80024a4:	f002 fba0 	bl	8004be8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f004 fe60 	bl	8007174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	4f54300a 	.word	0x4f54300a
 80024c4:	4f54310a 	.word	0x4f54310a

080024c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	333c      	adds	r3, #60	; 0x3c
 80024e0:	3304      	adds	r3, #4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a15      	ldr	r2, [pc, #84]	; (8002550 <PCD_EP_OutSetupPacket_int+0x88>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d90e      	bls.n	800251c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800251a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f004 fe17 	bl	8007150 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <PCD_EP_OutSetupPacket_int+0x88>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d90c      	bls.n	8002544 <PCD_EP_OutSetupPacket_int+0x7c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d108      	bne.n	8002544 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800253c:	461a      	mov	r2, r3
 800253e:	2101      	movs	r1, #1
 8002540:	f002 fb52 	bl	8004be8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	4f54300a 	.word	0x4f54300a

08002554 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	4613      	mov	r3, r2
 8002562:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002572:	883b      	ldrh	r3, [r7, #0]
 8002574:	0419      	lsls	r1, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	430a      	orrs	r2, r1
 800257e:	629a      	str	r2, [r3, #40]	; 0x28
 8002580:	e028      	b.n	80025d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4413      	add	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e00d      	b.n	80025b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3340      	adds	r3, #64	; 0x40
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4413      	add	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	3301      	adds	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3ec      	bcc.n	8002596 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025bc:	883b      	ldrh	r3, [r7, #0]
 80025be:	0418      	lsls	r0, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	4302      	orrs	r2, r0
 80025cc:	3340      	adds	r3, #64	; 0x40
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e267      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d075      	beq.n	8002726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	4b88      	ldr	r3, [pc, #544]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d00c      	beq.n	8002660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264e:	2b08      	cmp	r3, #8
 8002650:	d112      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b82      	ldr	r3, [pc, #520]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05b      	beq.n	8002724 <HAL_RCC_OscConfig+0x108>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d157      	bne.n	8002724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e242      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x74>
 8002682:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x98>
 800269a:	4b70      	ldr	r3, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6f      	ldr	r2, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a6c      	ldr	r2, [pc, #432]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0xb0>
 80026b4:	4b69      	ldr	r3, [pc, #420]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a68      	ldr	r2, [pc, #416]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fa2e 	bl	8000b34 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fa2a 	bl	8000b34 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e207      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b5b      	ldr	r3, [pc, #364]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0xc0>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fa1a 	bl	8000b34 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fa16 	bl	8000b34 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1f3      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0xe8>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d063      	beq.n	80027fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002746:	2b08      	cmp	r3, #8
 8002748:	d11c      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274a:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d116      	bne.n	8002784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d001      	beq.n	800276e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1c7      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4937      	ldr	r1, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x240>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	e03a      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe f9cf 	bl	8000b34 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe f9cb 	bl	8000b34 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e1a8      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4925      	ldr	r1, [pc, #148]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x244>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe f9ae 	bl	8000b34 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027dc:	f7fe f9aa 	bl	8000b34 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e187      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d036      	beq.n	8002874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe f98e 	bl	8000b34 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe f98a 	bl	8000b34 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e167      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x240>)
 8002830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x200>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_RCC_OscConfig+0x248>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe f977 	bl	8000b34 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	e00e      	b.n	8002868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284a:	f7fe f973 	bl	8000b34 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d907      	bls.n	8002868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e150      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 800285c:	40023800 	.word	0x40023800
 8002860:	42470000 	.word	0x42470000
 8002864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	4b88      	ldr	r3, [pc, #544]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ea      	bne.n	800284a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8097 	beq.w	80029b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002886:	4b81      	ldr	r3, [pc, #516]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a7c      	ldr	r2, [pc, #496]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b7a      	ldr	r3, [pc, #488]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a73      	ldr	r2, [pc, #460]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe f933 	bl	8000b34 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe f92f 	bl	8000b34 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e10c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x474>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x2ea>
 80028f8:	4b64      	ldr	r3, [pc, #400]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a63      	ldr	r2, [pc, #396]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e01c      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b5f      	ldr	r3, [pc, #380]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5e      	ldr	r2, [pc, #376]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a5b      	ldr	r2, [pc, #364]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x324>
 8002928:	4b58      	ldr	r3, [pc, #352]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a57      	ldr	r2, [pc, #348]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	4b55      	ldr	r3, [pc, #340]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 800293a:	f023 0304 	bic.w	r3, r3, #4
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe f8f4 	bl	8000b34 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe f8f0 	bl	8000b34 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0cb      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0ee      	beq.n	8002950 <HAL_RCC_OscConfig+0x334>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe f8de 	bl	8000b34 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe f8da 	bl	8000b34 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e0b5      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002992:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ee      	bne.n	800297c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4a38      	ldr	r2, [pc, #224]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80a1 	beq.w	8002afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d05c      	beq.n	8002a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d141      	bne.n	8002a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f8ae 	bl	8000b34 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe f8aa 	bl	8000b34 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e087      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	019b      	lsls	r3, r3, #6
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	3b01      	subs	r3, #1
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f883 	bl	8000b34 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a32:	f7fe f87f 	bl	8000b34 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e05c      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a44:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x416>
 8002a50:	e054      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x478>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe f86c 	bl	8000b34 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe f868 	bl	8000b34 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e045      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_OscConfig+0x470>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x444>
 8002a7e:	e03d      	b.n	8002afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e038      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000
 8002a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x4ec>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d11a      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fd ff9a 	bl	8000b34 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fd ff96 	bl	8000b34 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fefa 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08007774 	.word	0x08007774
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b090      	sub	sp, #64	; 0x40
 8002cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce8:	2300      	movs	r3, #0
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf0:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 030c 	and.w	r3, r3, #12
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	f200 80a1 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x34>
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0a:	e09b      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d10:	e09b      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d12:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d16:	e098      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d18:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	627a      	str	r2, [r7, #36]	; 0x24
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d40:	2100      	movs	r1, #0
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d44:	fb03 f201 	mul.w	r2, r3, r1
 8002d48:	2300      	movs	r3, #0
 8002d4a:	fb00 f303 	mul.w	r3, r0, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a43      	ldr	r2, [pc, #268]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d52:	fba0 1202 	umull	r1, r2, r0, r2
 8002d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d58:	460a      	mov	r2, r1
 8002d5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5e:	4413      	add	r3, r2
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	2200      	movs	r2, #0
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	61fa      	str	r2, [r7, #28]
 8002d6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d72:	f7fd fa2f 	bl	80001d4 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d7e:	e053      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	2200      	movs	r2, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	617a      	str	r2, [r7, #20]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d92:	f04f 0b00 	mov.w	fp, #0
 8002d96:	4652      	mov	r2, sl
 8002d98:	465b      	mov	r3, fp
 8002d9a:	f04f 0000 	mov.w	r0, #0
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	0159      	lsls	r1, r3, #5
 8002da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da8:	0150      	lsls	r0, r2, #5
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	ebb2 080a 	subs.w	r8, r2, sl
 8002db2:	eb63 090b 	sbc.w	r9, r3, fp
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dca:	ebb2 0408 	subs.w	r4, r2, r8
 8002dce:	eb63 0509 	sbc.w	r5, r3, r9
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	00eb      	lsls	r3, r5, #3
 8002ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de0:	00e2      	lsls	r2, r4, #3
 8002de2:	4614      	mov	r4, r2
 8002de4:	461d      	mov	r5, r3
 8002de6:	eb14 030a 	adds.w	r3, r4, sl
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	eb45 030b 	adc.w	r3, r5, fp
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	2200      	movs	r2, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	60fa      	str	r2, [r7, #12]
 8002e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e1c:	f7fd f9da 	bl	80001d4 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3740      	adds	r7, #64	; 0x40
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	017d7840 	.word	0x017d7840

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e041      	b.n	8002f12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fd4e 	bl	8000944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	f000 f950 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e03c      	b.n	8002fae <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1e      	ldr	r2, [pc, #120]	; (8002fbc <HAL_TIM_Base_Start+0xa0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_TIM_Base_Start+0x5c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d013      	beq.n	8002f78 <HAL_TIM_Base_Start+0x5c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_TIM_Base_Start+0xa4>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_TIM_Base_Start+0x5c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <HAL_TIM_Base_Start+0xa8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_TIM_Base_Start+0x5c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_TIM_Base_Start+0xac>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIM_Base_Start+0x5c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_TIM_Base_Start+0xb0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d111      	bne.n	8002f9c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d010      	beq.n	8002fac <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9a:	e007      	b.n	8002fac <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40000c00 	.word	0x40000c00
 8002fcc:	40014000 	.word	0x40014000

08002fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_TIM_ConfigClockSource+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0b4      	b.n	8003156 <HAL_TIM_ConfigClockSource+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800300a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003024:	d03e      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302a:	f200 8087 	bhi.w	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	f000 8086 	beq.w	8003142 <HAL_TIM_ConfigClockSource+0x172>
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d87f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800303c:	2b70      	cmp	r3, #112	; 0x70
 800303e:	d01a      	beq.n	8003076 <HAL_TIM_ConfigClockSource+0xa6>
 8003040:	2b70      	cmp	r3, #112	; 0x70
 8003042:	d87b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003044:	2b60      	cmp	r3, #96	; 0x60
 8003046:	d050      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x11a>
 8003048:	2b60      	cmp	r3, #96	; 0x60
 800304a:	d877      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800304c:	2b50      	cmp	r3, #80	; 0x50
 800304e:	d03c      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0xfa>
 8003050:	2b50      	cmp	r3, #80	; 0x50
 8003052:	d873      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d058      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x13a>
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d86f      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800305c:	2b30      	cmp	r3, #48	; 0x30
 800305e:	d064      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d86b      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 8003064:	2b20      	cmp	r3, #32
 8003066:	d060      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003068:	2b20      	cmp	r3, #32
 800306a:	d867      	bhi.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05c      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003070:	2b10      	cmp	r3, #16
 8003072:	d05a      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	e062      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f000 f965 	bl	8003354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	609a      	str	r2, [r3, #8]
      break;
 80030a2:	e04f      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f000 f94e 	bl	8003354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c6:	609a      	str	r2, [r3, #8]
      break;
 80030c8:	e03c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 f8c2 	bl	8003260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2150      	movs	r1, #80	; 0x50
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f91b 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 80030e8:	e02c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 f8e1 	bl	80032be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2160      	movs	r1, #96	; 0x60
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f90b 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8003108:	e01c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 f8a2 	bl	8003260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2140      	movs	r1, #64	; 0x40
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f8fb 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8003128:	e00c      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	4610      	mov	r0, r2
 8003136:	f000 f8f2 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 800313a:	e003      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]
      break;
 8003140:	e000      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a34      	ldr	r2, [pc, #208]	; (8003244 <TIM_Base_SetConfig+0xe4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00f      	beq.n	8003198 <TIM_Base_SetConfig+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317e:	d00b      	beq.n	8003198 <TIM_Base_SetConfig+0x38>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a31      	ldr	r2, [pc, #196]	; (8003248 <TIM_Base_SetConfig+0xe8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d007      	beq.n	8003198 <TIM_Base_SetConfig+0x38>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <TIM_Base_SetConfig+0xec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_Base_SetConfig+0x38>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <TIM_Base_SetConfig+0xf0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d108      	bne.n	80031aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a25      	ldr	r2, [pc, #148]	; (8003244 <TIM_Base_SetConfig+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01b      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d017      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a22      	ldr	r2, [pc, #136]	; (8003248 <TIM_Base_SetConfig+0xe8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a21      	ldr	r2, [pc, #132]	; (800324c <TIM_Base_SetConfig+0xec>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00f      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a20      	ldr	r2, [pc, #128]	; (8003250 <TIM_Base_SetConfig+0xf0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00b      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <TIM_Base_SetConfig+0xf4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <TIM_Base_SetConfig+0xf8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d003      	beq.n	80031ea <TIM_Base_SetConfig+0x8a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_Base_SetConfig+0xfc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d108      	bne.n	80031fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <TIM_Base_SetConfig+0xe4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0210 	bic.w	r2, r3, #16
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	f043 0307 	orr.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	021a      	lsls	r2, r3, #8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	431a      	orrs	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e050      	b.n	800344e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d013      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a13      	ldr	r2, [pc, #76]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10c      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4313      	orrs	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40010000 	.word	0x40010000
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40014000 	.word	0x40014000

08003470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003470:	b084      	sub	sp, #16
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	f107 001c 	add.w	r0, r7, #28
 800347e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	d122      	bne.n	80034ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800349c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80034b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f001 fbee 	bl	8004ca4 <USB_CoreReset>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e01a      	b.n	8003504 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 fbe2 	bl	8004ca4 <USB_CoreReset>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80034e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38
 80034f6:	e005      	b.n	8003504 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10b      	bne.n	8003522 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f043 0206 	orr.w	r2, r3, #6
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800352e:	b004      	add	sp, #16
 8003530:	4770      	bx	lr
	...

08003534 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d165      	bne.n	8003614 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4a41      	ldr	r2, [pc, #260]	; (8003650 <USB_SetTurnaroundTime+0x11c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d906      	bls.n	800355e <USB_SetTurnaroundTime+0x2a>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4a40      	ldr	r2, [pc, #256]	; (8003654 <USB_SetTurnaroundTime+0x120>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d202      	bcs.n	800355e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003558:	230f      	movs	r3, #15
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e062      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <USB_SetTurnaroundTime+0x120>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d306      	bcc.n	8003574 <USB_SetTurnaroundTime+0x40>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <USB_SetTurnaroundTime+0x124>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d202      	bcs.n	8003574 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800356e:	230e      	movs	r3, #14
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e057      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <USB_SetTurnaroundTime+0x124>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d306      	bcc.n	800358a <USB_SetTurnaroundTime+0x56>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a37      	ldr	r2, [pc, #220]	; (800365c <USB_SetTurnaroundTime+0x128>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d202      	bcs.n	800358a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003584:	230d      	movs	r3, #13
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e04c      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4a33      	ldr	r2, [pc, #204]	; (800365c <USB_SetTurnaroundTime+0x128>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d306      	bcc.n	80035a0 <USB_SetTurnaroundTime+0x6c>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4a32      	ldr	r2, [pc, #200]	; (8003660 <USB_SetTurnaroundTime+0x12c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d802      	bhi.n	80035a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800359a:	230c      	movs	r3, #12
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	e041      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <USB_SetTurnaroundTime+0x12c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d906      	bls.n	80035b6 <USB_SetTurnaroundTime+0x82>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <USB_SetTurnaroundTime+0x130>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d802      	bhi.n	80035b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80035b0:	230b      	movs	r3, #11
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e036      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <USB_SetTurnaroundTime+0x130>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d906      	bls.n	80035cc <USB_SetTurnaroundTime+0x98>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4a29      	ldr	r2, [pc, #164]	; (8003668 <USB_SetTurnaroundTime+0x134>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d802      	bhi.n	80035cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80035c6:	230a      	movs	r3, #10
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e02b      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4a26      	ldr	r2, [pc, #152]	; (8003668 <USB_SetTurnaroundTime+0x134>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d906      	bls.n	80035e2 <USB_SetTurnaroundTime+0xae>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a25      	ldr	r2, [pc, #148]	; (800366c <USB_SetTurnaroundTime+0x138>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d202      	bcs.n	80035e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80035dc:	2309      	movs	r3, #9
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e020      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4a21      	ldr	r2, [pc, #132]	; (800366c <USB_SetTurnaroundTime+0x138>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d306      	bcc.n	80035f8 <USB_SetTurnaroundTime+0xc4>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	4a20      	ldr	r2, [pc, #128]	; (8003670 <USB_SetTurnaroundTime+0x13c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d802      	bhi.n	80035f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80035f2:	2308      	movs	r3, #8
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e015      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <USB_SetTurnaroundTime+0x13c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d906      	bls.n	800360e <USB_SetTurnaroundTime+0xda>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <USB_SetTurnaroundTime+0x140>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d202      	bcs.n	800360e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003608:	2307      	movs	r3, #7
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e00a      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800360e:	2306      	movs	r3, #6
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e007      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800361a:	2309      	movs	r3, #9
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e001      	b.n	8003624 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003620:	2309      	movs	r3, #9
 8003622:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	029b      	lsls	r3, r3, #10
 8003638:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	00d8acbf 	.word	0x00d8acbf
 8003654:	00e4e1c0 	.word	0x00e4e1c0
 8003658:	00f42400 	.word	0x00f42400
 800365c:	01067380 	.word	0x01067380
 8003660:	011a499f 	.word	0x011a499f
 8003664:	01312cff 	.word	0x01312cff
 8003668:	014ca43f 	.word	0x014ca43f
 800366c:	016e3600 	.word	0x016e3600
 8003670:	01a6ab1f 	.word	0x01a6ab1f
 8003674:	01e84800 	.word	0x01e84800

08003678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d115      	bne.n	800370a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036ea:	2001      	movs	r0, #1
 80036ec:	f7fd fa2e 	bl	8000b4c <HAL_Delay>
      ms++;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3301      	adds	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f001 fa45 	bl	8004b86 <USB_GetMode>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d01e      	beq.n	8003740 <USB_SetCurrentMode+0x84>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b31      	cmp	r3, #49	; 0x31
 8003706:	d9f0      	bls.n	80036ea <USB_SetCurrentMode+0x2e>
 8003708:	e01a      	b.n	8003740 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d115      	bne.n	800373c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800371c:	2001      	movs	r0, #1
 800371e:	f7fd fa15 	bl	8000b4c <HAL_Delay>
      ms++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f001 fa2c 	bl	8004b86 <USB_GetMode>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <USB_SetCurrentMode+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b31      	cmp	r3, #49	; 0x31
 8003738:	d9f0      	bls.n	800371c <USB_SetCurrentMode+0x60>
 800373a:	e001      	b.n	8003740 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e005      	b.n	800374c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b32      	cmp	r3, #50	; 0x32
 8003744:	d101      	bne.n	800374a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003754:	b084      	sub	sp, #16
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e009      	b.n	8003788 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3340      	adds	r3, #64	; 0x40
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3301      	adds	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b0e      	cmp	r3, #14
 800378c:	d9f2      	bls.n	8003774 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11c      	bne.n	80037ce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
 80037cc:	e00b      	b.n	80037e6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2300      	movs	r3, #0
 80037f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	4619      	mov	r1, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	461a      	mov	r2, r3
 8003802:	680b      	ldr	r3, [r1, #0]
 8003804:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10c      	bne.n	8003826 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003812:	2100      	movs	r1, #0
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f965 	bl	8003ae4 <USB_SetDevSpeed>
 800381a:	e008      	b.n	800382e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800381c:	2101      	movs	r1, #1
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f960 	bl	8003ae4 <USB_SetDevSpeed>
 8003824:	e003      	b.n	800382e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003826:	2103      	movs	r1, #3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f95b 	bl	8003ae4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800382e:	2110      	movs	r1, #16
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8f3 	bl	8003a1c <USB_FlushTxFifo>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f91f 	bl	8003a84 <USB_FlushRxFifo>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386e:	461a      	mov	r2, r3
 8003870:	2300      	movs	r3, #0
 8003872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e043      	b.n	8003902 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800388c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003890:	d118      	bne.n	80038c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a4:	461a      	mov	r2, r3
 80038a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e013      	b.n	80038d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ba:	461a      	mov	r2, r3
 80038bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e008      	b.n	80038d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	461a      	mov	r2, r3
 80038e4:	2300      	movs	r3, #0
 80038e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	461a      	mov	r2, r3
 80038f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	3301      	adds	r3, #1
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	429a      	cmp	r2, r3
 8003908:	d3b7      	bcc.n	800387a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e043      	b.n	8003998 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003926:	d118      	bne.n	800395a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e013      	b.n	800396c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	461a      	mov	r2, r3
 8003952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e008      	b.n	800396c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	461a      	mov	r2, r3
 8003968:	2300      	movs	r3, #0
 800396a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2300      	movs	r3, #0
 800397c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	461a      	mov	r2, r3
 800398c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	3301      	adds	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	429a      	cmp	r2, r3
 800399e:	d3b7      	bcc.n	8003910 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f043 0210 	orr.w	r2, r3, #16
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	4b0f      	ldr	r3, [pc, #60]	; (8003a18 <USB_DevInit+0x2c4>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a14:	b004      	add	sp, #16
 8003a16:	4770      	bx	lr
 8003a18:	803c3800 	.word	0x803c3800

08003a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <USB_FlushTxFifo+0x64>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e01b      	b.n	8003a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	daf2      	bge.n	8003a2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	019b      	lsls	r3, r3, #6
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <USB_FlushTxFifo+0x64>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e006      	b.n	8003a74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d0f0      	beq.n	8003a54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	00030d40 	.word	0x00030d40

08003a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a11      	ldr	r2, [pc, #68]	; (8003ae0 <USB_FlushRxFifo+0x5c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e018      	b.n	8003ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	daf2      	bge.n	8003a90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2210      	movs	r2, #16
 8003ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <USB_FlushRxFifo+0x5c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e006      	b.n	8003ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d0f0      	beq.n	8003ab4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	00030d40 	.word	0x00030d40

08003ae4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75fb      	strb	r3, [r7, #23]
 8003b3a:	e00a      	b.n	8003b52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d002      	beq.n	8003b48 <USB_GetDevSpeed+0x32>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d102      	bne.n	8003b4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003b48:	2302      	movs	r3, #2
 8003b4a:	75fb      	strb	r3, [r7, #23]
 8003b4c:	e001      	b.n	8003b52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003b4e:	230f      	movs	r3, #15
 8003b50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	785b      	ldrb	r3, [r3, #1]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d13a      	bne.n	8003bf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d155      	bne.n	8003c60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	059b      	lsls	r3, r3, #22
 8003bd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e036      	b.n	8003c60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11a      	bne.n	8003c60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	791b      	ldrb	r3, [r3, #4]
 8003c44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c46:	430b      	orrs	r3, r1
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d161      	bne.n	8003d50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ca2:	d11f      	bne.n	8003ce4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	0151      	lsls	r1, r2, #5
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	440a      	add	r2, r1
 8003cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ce2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d04:	4013      	ands	r3, r2
 8003d06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	68f9      	ldr	r1, [r7, #12]
 8003d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0159      	lsls	r1, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d46:	4619      	mov	r1, r3
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <USB_DeactivateEndpoint+0x1b0>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
 8003d4e:	e060      	b.n	8003e12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d66:	d11f      	bne.n	8003da8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003da6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc8:	4013      	ands	r3, r2
 8003dca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	2101      	movs	r1, #1
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	43db      	mvns	r3, r3
 8003de6:	68f9      	ldr	r1, [r7, #12]
 8003de8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dec:	4013      	ands	r3, r2
 8003dee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	0159      	lsls	r1, r3, #5
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	440b      	add	r3, r1
 8003e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <USB_DeactivateEndpoint+0x1b4>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	ec337800 	.word	0xec337800
 8003e24:	eff37800 	.word	0xeff37800

08003e28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	; 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 815c 	bne.w	8004102 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d132      	bne.n	8003eb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	0cdb      	lsrs	r3, r3, #19
 8003eb2:	04db      	lsls	r3, r3, #19
 8003eb4:	6113      	str	r3, [r2, #16]
 8003eb6:	e074      	b.n	8003fa2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	0cdb      	lsrs	r3, r3, #19
 8003ed4:	04db      	lsls	r3, r3, #19
 8003ed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ef6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f08:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	440b      	add	r3, r1
 8003f14:	1e59      	subs	r1, r3, #1
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f1e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f20:	4b9d      	ldr	r3, [pc, #628]	; (8004198 <USB_EPStartXfer+0x370>)
 8003f22:	400b      	ands	r3, r1
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	0148      	lsls	r0, r1, #5
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f30:	4313      	orrs	r3, r2
 8003f32:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	0148      	lsls	r0, r1, #5
 8003f4e:	69f9      	ldr	r1, [r7, #28]
 8003f50:	4401      	add	r1, r0
 8003f52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f56:	4313      	orrs	r3, r2
 8003f58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d11f      	bne.n	8003fa2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003f80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d14b      	bne.n	8004040 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d128      	bne.n	800401e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d110      	bne.n	8003ffe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e00f      	b.n	800401e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	0151      	lsls	r1, r2, #5
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	440a      	add	r2, r1
 8004014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e133      	b.n	80042a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800405e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	791b      	ldrb	r3, [r3, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d015      	beq.n	8004094 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 811b 	beq.w	80042a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	69f9      	ldr	r1, [r7, #28]
 800408a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800408e:	4313      	orrs	r3, r2
 8004090:	634b      	str	r3, [r1, #52]	; 0x34
 8004092:	e109      	b.n	80042a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d110      	bne.n	80040c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e00f      	b.n	80040e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	69fa      	ldr	r2, [r7, #28]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6919      	ldr	r1, [r3, #16]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	b298      	uxth	r0, r3
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4603      	mov	r3, r0
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 fade 	bl	80046bc <USB_WritePacket>
 8004100:	e0d2      	b.n	80042a8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411c:	0cdb      	lsrs	r3, r3, #19
 800411e:	04db      	lsls	r3, r3, #19
 8004120:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004140:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004144:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d126      	bne.n	800419c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	0148      	lsls	r0, r1, #5
 8004168:	69f9      	ldr	r1, [r7, #28]
 800416a:	4401      	add	r1, r0
 800416c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004170:	4313      	orrs	r3, r2
 8004172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004192:	6113      	str	r3, [r2, #16]
 8004194:	e03a      	b.n	800420c <USB_EPStartXfer+0x3e4>
 8004196:	bf00      	nop
 8004198:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	1e5a      	subs	r2, r3, #1
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	8afa      	ldrh	r2, [r7, #22]
 80041b8:	fb03 f202 	mul.w	r2, r3, r2
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	8afb      	ldrh	r3, [r7, #22]
 80041d0:	04d9      	lsls	r1, r3, #19
 80041d2:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <USB_EPStartXfer+0x48c>)
 80041d4:	400b      	ands	r3, r1
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	0148      	lsls	r0, r1, #5
 80041da:	69f9      	ldr	r1, [r7, #28]
 80041dc:	4401      	add	r1, r0
 80041de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041e2:	4313      	orrs	r3, r2
 80041e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	0148      	lsls	r0, r1, #5
 8004200:	69f9      	ldr	r1, [r7, #28]
 8004202:	4401      	add	r1, r0
 8004204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004208:	4313      	orrs	r3, r2
 800420a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10d      	bne.n	800422e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	460a      	mov	r2, r1
 800422c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	791b      	ldrb	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d128      	bne.n	8004288 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	e00f      	b.n	8004288 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	0151      	lsls	r1, r2, #5
 800427a:	69fa      	ldr	r2, [r7, #28]
 800427c:	440a      	add	r2, r1
 800427e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	440a      	add	r2, r1
 800429e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	1ff80000 	.word	0x1ff80000

080042b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f040 80ce 	bne.w	8004476 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d132      	bne.n	8004348 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004300:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004320:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004324:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	0151      	lsls	r1, r2, #5
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	440a      	add	r2, r1
 800433c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004340:	0cdb      	lsrs	r3, r3, #19
 8004342:	04db      	lsls	r3, r3, #19
 8004344:	6113      	str	r3, [r2, #16]
 8004346:	e04e      	b.n	80043e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	440a      	add	r2, r1
 800435e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004362:	0cdb      	lsrs	r3, r3, #19
 8004364:	04db      	lsls	r3, r3, #19
 8004366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	440a      	add	r2, r1
 800437e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004382:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004386:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800438a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d903      	bls.n	80043a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d6:	6939      	ldr	r1, [r7, #16]
 80043d8:	0148      	lsls	r0, r1, #5
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	4401      	add	r1, r0
 80043de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d11e      	bne.n	800442a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004400:	461a      	mov	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	0151      	lsls	r1, r2, #5
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	440a      	add	r2, r1
 800441e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004422:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e097      	b.n	800455a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004448:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8083 	beq.w	800455a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004470:	4313      	orrs	r3, r2
 8004472:	634b      	str	r3, [r1, #52]	; 0x34
 8004474:	e071      	b.n	800455a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	440a      	add	r2, r1
 800448c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004490:	0cdb      	lsrs	r3, r3, #19
 8004492:	04db      	lsls	r3, r3, #19
 8004494:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004508:	6939      	ldr	r1, [r7, #16]
 800450a:	0148      	lsls	r0, r1, #5
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	4401      	add	r1, r0
 8004510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004514:	4313      	orrs	r3, r2
 8004516:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d10d      	bne.n	800453a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6919      	ldr	r1, [r3, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	4413      	add	r3, r2
 8004532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004536:	460a      	mov	r2, r1
 8004538:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	0151      	lsls	r1, r2, #5
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	440a      	add	r2, r1
 8004550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004558:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d14a      	bne.n	800461c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800459a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800459e:	f040 8086 	bne.w	80046ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d902      	bls.n	8004600 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
          break;
 80045fe:	e056      	b.n	80046ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004618:	d0e7      	beq.n	80045ea <USB_EPStopXfer+0x82>
 800461a:	e048      	b.n	80046ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004634:	d13b      	bne.n	80046ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	7812      	ldrb	r2, [r2, #0]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004658:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3301      	adds	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f242 7210 	movw	r2, #10000	; 0x2710
 800468a:	4293      	cmp	r3, r2
 800468c:	d902      	bls.n	8004694 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	75fb      	strb	r3, [r7, #23]
          break;
 8004692:	e00c      	b.n	80046ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ac:	d0e7      	beq.n	800467e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	460b      	mov	r3, r1
 80046cc:	71fb      	strb	r3, [r7, #7]
 80046ce:	4613      	mov	r3, r2
 80046d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d123      	bne.n	800472a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046e2:	88bb      	ldrh	r3, [r7, #4]
 80046e4:	3303      	adds	r3, #3
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e018      	b.n	8004722 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	031a      	lsls	r2, r3, #12
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	461a      	mov	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3301      	adds	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	3301      	adds	r3, #1
 8004714:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	3301      	adds	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3e2      	bcc.n	80046f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3724      	adds	r7, #36	; 0x24
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004738:	b480      	push	{r7}
 800473a:	b08b      	sub	sp, #44	; 0x2c
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	089b      	lsrs	r3, r3, #2
 8004752:	b29b      	uxth	r3, r3
 8004754:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	e014      	b.n	800478e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	3301      	adds	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	3301      	adds	r3, #1
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	3301      	adds	r3, #1
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	3301      	adds	r3, #1
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	3301      	adds	r3, #1
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	429a      	cmp	r2, r3
 8004794:	d3e6      	bcc.n	8004764 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004796:	8bfb      	ldrh	r3, [r7, #30]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	461a      	mov	r2, r3
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	701a      	strb	r2, [r3, #0]
      i++;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	3301      	adds	r3, #1
 80047c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	3301      	adds	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047ce:	8bfb      	ldrh	r3, [r7, #30]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047d4:	8bfb      	ldrh	r3, [r7, #30]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ea      	bne.n	80047b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047dc:	4618      	mov	r0, r3
 80047de:	372c      	adds	r7, #44	; 0x2c
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d12c      	bne.n	800485e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	db12      	blt.n	800483c <USB_EPSetStall+0x54>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	0151      	lsls	r1, r2, #5
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	440a      	add	r2, r1
 8004832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800483a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e02b      	b.n	80048b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db12      	blt.n	8004896 <USB_EPSetStall+0xae>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00f      	beq.n	8004896 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004890:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004894:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d128      	bne.n	8004932 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0151      	lsls	r1, r2, #5
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	440a      	add	r2, r1
 80048f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	791b      	ldrb	r3, [r3, #4]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d003      	beq.n	8004910 <USB_EPClearStall+0x4c>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	791b      	ldrb	r3, [r3, #4]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d138      	bne.n	8004982 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e027      	b.n	8004982 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004950:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	791b      	ldrb	r3, [r3, #4]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d003      	beq.n	8004962 <USB_EPClearStall+0x9e>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	791b      	ldrb	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d10f      	bne.n	8004982 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004980:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ca:	4313      	orrs	r3, r2
 80049cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049f6:	f023 0303 	bic.w	r3, r3, #3
 80049fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0a:	f023 0302 	bic.w	r3, r3, #2
 8004a0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a38:	f023 0303 	bic.w	r3, r3, #3
 8004a3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a78:	68fb      	ldr	r3, [r7, #12]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	0c1b      	lsrs	r3, r3, #16
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	b29b      	uxth	r3, r3
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004afe:	78fb      	ldrb	r3, [r7, #3]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b087      	sub	sp, #28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	01db      	lsls	r3, r3, #7
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b78:	68bb      	ldr	r3, [r7, #8]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0301 	and.w	r3, r3, #1
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bc0:	f023 0307 	bic.w	r3, r3, #7
 8004bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	333c      	adds	r3, #60	; 0x3c
 8004bfe:	3304      	adds	r3, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <USB_EP0_OutStart+0xb8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d90a      	bls.n	8004c22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1c:	d101      	bne.n	8004c22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e037      	b.n	8004c92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c50:	f043 0318 	orr.w	r3, r3, #24
 8004c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d10f      	bne.n	8004c90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	4f54300a 	.word	0x4f54300a

08004ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <USB_CoreReset+0x64>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d901      	bls.n	8004cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e01b      	b.n	8004cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	daf2      	bge.n	8004cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a09      	ldr	r2, [pc, #36]	; (8004d08 <USB_CoreReset+0x64>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d901      	bls.n	8004cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e006      	b.n	8004cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d0f0      	beq.n	8004cda <USB_CoreReset+0x36>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	00030d40 	.word	0x00030d40

08004d0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d1c:	f002 fc8a 	bl	8007634 <USBD_static_malloc>
 8004d20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	32b0      	adds	r2, #176	; 0xb0
 8004d32:	2100      	movs	r1, #0
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e0d4      	b.n	8004ee6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004d3c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004d40:	2100      	movs	r1, #0
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f002 fcba 	bl	80076bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	; 0xb0
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	32b0      	adds	r2, #176	; 0xb0
 8004d62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	7c1b      	ldrb	r3, [r3, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d138      	bne.n	8004de6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004d74:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <USBD_CDC_Init+0x1e4>)
 8004d76:	7819      	ldrb	r1, [r3, #0]
 8004d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f002 fb35 	bl	80073ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004d84:	4b5a      	ldr	r3, [pc, #360]	; (8004ef0 <USBD_CDC_Init+0x1e4>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	f003 020f 	and.w	r2, r3, #15
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	3324      	adds	r3, #36	; 0x24
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004d9e:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004da0:	7819      	ldrb	r1, [r3, #0]
 8004da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da6:	2202      	movs	r2, #2
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f002 fb20 	bl	80073ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004dae:	4b51      	ldr	r3, [pc, #324]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004dca:	4b4b      	ldr	r3, [pc, #300]	; (8004ef8 <USBD_CDC_Init+0x1ec>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3326      	adds	r3, #38	; 0x26
 8004de0:	2210      	movs	r2, #16
 8004de2:	801a      	strh	r2, [r3, #0]
 8004de4:	e035      	b.n	8004e52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004de6:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <USBD_CDC_Init+0x1e4>)
 8004de8:	7819      	ldrb	r1, [r3, #0]
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	2202      	movs	r2, #2
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f002 fafd 	bl	80073ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004df4:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <USBD_CDC_Init+0x1e4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f003 020f 	and.w	r2, r3, #15
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3324      	adds	r3, #36	; 0x24
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e0e:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004e10:	7819      	ldrb	r1, [r3, #0]
 8004e12:	2340      	movs	r3, #64	; 0x40
 8004e14:	2202      	movs	r2, #2
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f002 fae9 	bl	80073ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e1c:	4b35      	ldr	r3, [pc, #212]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 020f 	and.w	r2, r3, #15
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004e34:	2201      	movs	r2, #1
 8004e36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <USBD_CDC_Init+0x1ec>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3326      	adds	r3, #38	; 0x26
 8004e4e:	2210      	movs	r2, #16
 8004e50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e52:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <USBD_CDC_Init+0x1ec>)
 8004e54:	7819      	ldrb	r1, [r3, #0]
 8004e56:	2308      	movs	r3, #8
 8004e58:	2203      	movs	r2, #3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f002 fac7 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <USBD_CDC_Init+0x1ec>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3324      	adds	r3, #36	; 0x24
 8004e76:	2201      	movs	r2, #1
 8004e78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	33b0      	adds	r3, #176	; 0xb0
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e018      	b.n	8004ee6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	7c1b      	ldrb	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004ebe:	7819      	ldrb	r1, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f002 fb7e 	bl	80075cc <USBD_LL_PrepareReceive>
 8004ed0:	e008      	b.n	8004ee4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ed2:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <USBD_CDC_Init+0x1e8>)
 8004ed4:	7819      	ldrb	r1, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 fb74 	bl	80075cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000093 	.word	0x20000093
 8004ef4:	20000094 	.word	0x20000094
 8004ef8:	20000095 	.word	0x20000095

08004efc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004f08:	4b3a      	ldr	r3, [pc, #232]	; (8004ff4 <USBD_CDC_DeInit+0xf8>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f002 fa93 	bl	800743a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <USBD_CDC_DeInit+0xf8>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3324      	adds	r3, #36	; 0x24
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004f2e:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <USBD_CDC_DeInit+0xfc>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	4619      	mov	r1, r3
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f002 fa80 	bl	800743a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004f3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ff8 <USBD_CDC_DeInit+0xfc>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	f003 020f 	and.w	r2, r3, #15
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f52:	2200      	movs	r2, #0
 8004f54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004f56:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <USBD_CDC_DeInit+0x100>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f002 fa6c 	bl	800743a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <USBD_CDC_DeInit+0x100>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	f003 020f 	and.w	r2, r3, #15
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	2200      	movs	r2, #0
 8004f7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004f7c:	4b1f      	ldr	r3, [pc, #124]	; (8004ffc <USBD_CDC_DeInit+0x100>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 020f 	and.w	r2, r3, #15
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3326      	adds	r3, #38	; 0x26
 8004f92:	2200      	movs	r2, #0
 8004f94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	32b0      	adds	r2, #176	; 0xb0
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01f      	beq.n	8004fe8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	33b0      	adds	r3, #176	; 0xb0
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	32b0      	adds	r2, #176	; 0xb0
 8004fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f002 fb40 	bl	8007650 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	32b0      	adds	r2, #176	; 0xb0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000093 	.word	0x20000093
 8004ff8:	20000094 	.word	0x20000094
 8004ffc:	20000095 	.word	0x20000095

08005000 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	32b0      	adds	r2, #176	; 0xb0
 8005014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005018:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800502c:	2303      	movs	r3, #3
 800502e:	e0bf      	b.n	80051b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005038:	2b00      	cmp	r3, #0
 800503a:	d050      	beq.n	80050de <USBD_CDC_Setup+0xde>
 800503c:	2b20      	cmp	r3, #32
 800503e:	f040 80af 	bne.w	80051a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	88db      	ldrh	r3, [r3, #6]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03a      	beq.n	80050c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b25b      	sxtb	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	da1b      	bge.n	800508c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	33b0      	adds	r3, #176	; 0xb0
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800506a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	88d2      	ldrh	r2, [r2, #6]
 8005070:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	88db      	ldrh	r3, [r3, #6]
 8005076:	2b07      	cmp	r3, #7
 8005078:	bf28      	it	cs
 800507a:	2307      	movcs	r3, #7
 800507c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	89fa      	ldrh	r2, [r7, #14]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f001 fd89 	bl	8006b9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800508a:	e090      	b.n	80051ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	785a      	ldrb	r2, [r3, #1]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	88db      	ldrh	r3, [r3, #6]
 800509a:	2b3f      	cmp	r3, #63	; 0x3f
 800509c:	d803      	bhi.n	80050a6 <USBD_CDC_Setup+0xa6>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	88db      	ldrh	r3, [r3, #6]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	e000      	b.n	80050a8 <USBD_CDC_Setup+0xa8>
 80050a6:	2240      	movs	r2, #64	; 0x40
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80050b6:	461a      	mov	r2, r3
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 fd9b 	bl	8006bf4 <USBD_CtlPrepareRx>
      break;
 80050be:	e076      	b.n	80051ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	33b0      	adds	r3, #176	; 0xb0
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	7850      	ldrb	r0, [r2, #1]
 80050d6:	2200      	movs	r2, #0
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	4798      	blx	r3
      break;
 80050dc:	e067      	b.n	80051ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b0b      	cmp	r3, #11
 80050e4:	d851      	bhi.n	800518a <USBD_CDC_Setup+0x18a>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <USBD_CDC_Setup+0xec>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	0800511d 	.word	0x0800511d
 80050f0:	08005199 	.word	0x08005199
 80050f4:	0800518b 	.word	0x0800518b
 80050f8:	0800518b 	.word	0x0800518b
 80050fc:	0800518b 	.word	0x0800518b
 8005100:	0800518b 	.word	0x0800518b
 8005104:	0800518b 	.word	0x0800518b
 8005108:	0800518b 	.word	0x0800518b
 800510c:	0800518b 	.word	0x0800518b
 8005110:	0800518b 	.word	0x0800518b
 8005114:	08005147 	.word	0x08005147
 8005118:	08005171 	.word	0x08005171
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b03      	cmp	r3, #3
 8005126:	d107      	bne.n	8005138 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005128:	f107 030a 	add.w	r3, r7, #10
 800512c:	2202      	movs	r2, #2
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 fd33 	bl	8006b9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005136:	e032      	b.n	800519e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f001 fcbd 	bl	8006aba <USBD_CtlError>
            ret = USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	75fb      	strb	r3, [r7, #23]
          break;
 8005144:	e02b      	b.n	800519e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b03      	cmp	r3, #3
 8005150:	d107      	bne.n	8005162 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005152:	f107 030d 	add.w	r3, r7, #13
 8005156:	2201      	movs	r2, #1
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 fd1e 	bl	8006b9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005160:	e01d      	b.n	800519e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fca8 	bl	8006aba <USBD_CtlError>
            ret = USBD_FAIL;
 800516a:	2303      	movs	r3, #3
 800516c:	75fb      	strb	r3, [r7, #23]
          break;
 800516e:	e016      	b.n	800519e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b03      	cmp	r3, #3
 800517a:	d00f      	beq.n	800519c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f001 fc9b 	bl	8006aba <USBD_CtlError>
            ret = USBD_FAIL;
 8005184:	2303      	movs	r3, #3
 8005186:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005188:	e008      	b.n	800519c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 fc94 	bl	8006aba <USBD_CtlError>
          ret = USBD_FAIL;
 8005192:	2303      	movs	r3, #3
 8005194:	75fb      	strb	r3, [r7, #23]
          break;
 8005196:	e002      	b.n	800519e <USBD_CDC_Setup+0x19e>
          break;
 8005198:	bf00      	nop
 800519a:	e008      	b.n	80051ae <USBD_CDC_Setup+0x1ae>
          break;
 800519c:	bf00      	nop
      }
      break;
 800519e:	e006      	b.n	80051ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fc89 	bl	8006aba <USBD_CtlError>
      ret = USBD_FAIL;
 80051a8:	2303      	movs	r3, #3
 80051aa:	75fb      	strb	r3, [r7, #23]
      break;
 80051ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80051ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	32b0      	adds	r2, #176	; 0xb0
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80051de:	2303      	movs	r3, #3
 80051e0:	e065      	b.n	80052ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	32b0      	adds	r2, #176	; 0xb0
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3318      	adds	r3, #24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02f      	beq.n	800526c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	f003 020f 	and.w	r2, r3, #15
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3318      	adds	r3, #24
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	f003 010f 	and.w	r1, r3, #15
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	460b      	mov	r3, r1
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4403      	add	r3, r0
 8005234:	3348      	adds	r3, #72	; 0x48
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fbb2 f1f3 	udiv	r1, r2, r3
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005242:	2b00      	cmp	r3, #0
 8005244:	d112      	bne.n	800526c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3318      	adds	r3, #24
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800525e:	78f9      	ldrb	r1, [r7, #3]
 8005260:	2300      	movs	r3, #0
 8005262:	2200      	movs	r2, #0
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f002 f990 	bl	800758a <USBD_LL_Transmit>
 800526a:	e01f      	b.n	80052ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	33b0      	adds	r3, #176	; 0xb0
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d010      	beq.n	80052ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	33b0      	adds	r3, #176	; 0xb0
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80052a8:	78fa      	ldrb	r2, [r7, #3]
 80052aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	32b0      	adds	r2, #176	; 0xb0
 80052cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	32b0      	adds	r2, #176	; 0xb0
 80052dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e01a      	b.n	800531e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f002 f98e 	bl	800760e <USBD_LL_GetRxDataSize>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	33b0      	adds	r3, #176	; 0xb0
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005318:	4611      	mov	r1, r2
 800531a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	32b0      	adds	r2, #176	; 0xb0
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005344:	2303      	movs	r3, #3
 8005346:	e025      	b.n	8005394 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	33b0      	adds	r3, #176	; 0xb0
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01a      	beq.n	8005392 <USBD_CDC_EP0_RxReady+0x6c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005362:	2bff      	cmp	r3, #255	; 0xff
 8005364:	d015      	beq.n	8005392 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	33b0      	adds	r3, #176	; 0xb0
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800537e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005386:	b292      	uxth	r2, r2
 8005388:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	22ff      	movs	r2, #255	; 0xff
 800538e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80053a4:	2182      	movs	r1, #130	; 0x82
 80053a6:	4818      	ldr	r0, [pc, #96]	; (8005408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053a8:	f000 fd4f 	bl	8005e4a <USBD_GetEpDesc>
 80053ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80053ae:	2101      	movs	r1, #1
 80053b0:	4815      	ldr	r0, [pc, #84]	; (8005408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053b2:	f000 fd4a 	bl	8005e4a <USBD_GetEpDesc>
 80053b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80053b8:	2181      	movs	r1, #129	; 0x81
 80053ba:	4813      	ldr	r0, [pc, #76]	; (8005408 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80053bc:	f000 fd45 	bl	8005e4a <USBD_GetEpDesc>
 80053c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2210      	movs	r2, #16
 80053cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d006      	beq.n	80053e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053dc:	711a      	strb	r2, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f0:	711a      	strb	r2, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2243      	movs	r2, #67	; 0x43
 80053fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000050 	.word	0x20000050

0800540c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005414:	2182      	movs	r1, #130	; 0x82
 8005416:	4818      	ldr	r0, [pc, #96]	; (8005478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005418:	f000 fd17 	bl	8005e4a <USBD_GetEpDesc>
 800541c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800541e:	2101      	movs	r1, #1
 8005420:	4815      	ldr	r0, [pc, #84]	; (8005478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005422:	f000 fd12 	bl	8005e4a <USBD_GetEpDesc>
 8005426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005428:	2181      	movs	r1, #129	; 0x81
 800542a:	4813      	ldr	r0, [pc, #76]	; (8005478 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800542c:	f000 fd0d 	bl	8005e4a <USBD_GetEpDesc>
 8005430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2210      	movs	r2, #16
 800543c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2200      	movs	r2, #0
 8005448:	711a      	strb	r2, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f042 0202 	orr.w	r2, r2, #2
 8005450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d006      	beq.n	8005466 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	711a      	strb	r2, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f042 0202 	orr.w	r2, r2, #2
 8005464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2243      	movs	r2, #67	; 0x43
 800546a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800546c:	4b02      	ldr	r3, [pc, #8]	; (8005478 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000050 	.word	0x20000050

0800547c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005484:	2182      	movs	r1, #130	; 0x82
 8005486:	4818      	ldr	r0, [pc, #96]	; (80054e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005488:	f000 fcdf 	bl	8005e4a <USBD_GetEpDesc>
 800548c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800548e:	2101      	movs	r1, #1
 8005490:	4815      	ldr	r0, [pc, #84]	; (80054e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005492:	f000 fcda 	bl	8005e4a <USBD_GetEpDesc>
 8005496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005498:	2181      	movs	r1, #129	; 0x81
 800549a:	4813      	ldr	r0, [pc, #76]	; (80054e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800549c:	f000 fcd5 	bl	8005e4a <USBD_GetEpDesc>
 80054a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2210      	movs	r2, #16
 80054ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054bc:	711a      	strb	r2, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d0:	711a      	strb	r2, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2243      	movs	r2, #67	; 0x43
 80054da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000050 	.word	0x20000050

080054ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	220a      	movs	r2, #10
 80054f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054fa:	4b03      	ldr	r3, [pc, #12]	; (8005508 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	2000000c 	.word	0x2000000c

0800550c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800551c:	2303      	movs	r3, #3
 800551e:	e009      	b.n	8005534 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	33b0      	adds	r3, #176	; 0xb0
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	32b0      	adds	r2, #176	; 0xb0
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005562:	2303      	movs	r3, #3
 8005564:	e008      	b.n	8005578 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	32b0      	adds	r2, #176	; 0xb0
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e004      	b.n	80055b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
	...

080055c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	32b0      	adds	r2, #176	; 0xb0
 80055d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	32b0      	adds	r2, #176	; 0xb0
 80055e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e025      	b.n	800563e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11f      	bne.n	800563c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2201      	movs	r2, #1
 8005600:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <USBD_CDC_TransmitPacket+0x88>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4403      	add	r3, r0
 800561e:	3318      	adds	r3, #24
 8005620:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <USBD_CDC_TransmitPacket+0x88>)
 8005624:	7819      	ldrb	r1, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 ffa9 	bl	800758a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000093 	.word	0x20000093

0800564c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	32b0      	adds	r2, #176	; 0xb0
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	32b0      	adds	r2, #176	; 0xb0
 800566e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005676:	2303      	movs	r3, #3
 8005678:	e018      	b.n	80056ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7c1b      	ldrb	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <USBD_CDC_ReceivePacket+0x68>)
 8005684:	7819      	ldrb	r1, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800568c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 ff9b 	bl	80075cc <USBD_LL_PrepareReceive>
 8005696:	e008      	b.n	80056aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <USBD_CDC_ReceivePacket+0x68>)
 800569a:	7819      	ldrb	r1, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056a2:	2340      	movs	r3, #64	; 0x40
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 ff91 	bl	80075cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000094 	.word	0x20000094

080056b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e01f      	b.n	8005710 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	79fa      	ldrb	r2, [r7, #7]
 8005702:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f001 fe0b 	bl	8007320 <USBD_LL_Init>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3718      	adds	r7, #24
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800572c:	2303      	movs	r3, #3
 800572e:	e025      	b.n	800577c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	32ae      	adds	r2, #174	; 0xae
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00f      	beq.n	800576c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	32ae      	adds	r2, #174	; 0xae
 8005756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f107 020e 	add.w	r2, r7, #14
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	4602      	mov	r2, r0
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fe13 	bl	80073b8 <USBD_LL_Start>
 8005792:	4603      	mov	r3, r0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	78fa      	ldrb	r2, [r7, #3]
 80057d6:	4611      	mov	r1, r2
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
 80057dc:	4603      	mov	r3, r0
 80057de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	4611      	mov	r1, r2
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f001 f908 	bl	8006a46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2b02      	cmp	r3, #2
 8005858:	d01a      	beq.n	8005890 <USBD_LL_SetupStage+0x72>
 800585a:	2b02      	cmp	r3, #2
 800585c:	d822      	bhi.n	80058a4 <USBD_LL_SetupStage+0x86>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <USBD_LL_SetupStage+0x4a>
 8005862:	2b01      	cmp	r3, #1
 8005864:	d00a      	beq.n	800587c <USBD_LL_SetupStage+0x5e>
 8005866:	e01d      	b.n	80058a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fb5f 	bl	8005f34 <USBD_StdDevReq>
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]
      break;
 800587a:	e020      	b.n	80058be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fbc7 	bl	8006018 <USBD_StdItfReq>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
      break;
 800588e:	e016      	b.n	80058be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005896:	4619      	mov	r1, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fc29 	bl	80060f0 <USBD_StdEPReq>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
      break;
 80058a2:	e00c      	b.n	80058be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80058aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fde0 	bl	8007478 <USBD_LL_StallEP>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	bf00      	nop
  }

  return ret;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	460b      	mov	r3, r1
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80058da:	7afb      	ldrb	r3, [r7, #11]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d16e      	bne.n	80059be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80058e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	f040 8098 	bne.w	8005a24 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d913      	bls.n	8005928 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	4293      	cmp	r3, r2
 8005918:	bf28      	it	cs
 800591a:	4613      	movcs	r3, r2
 800591c:	461a      	mov	r2, r3
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f001 f984 	bl	8006c2e <USBD_CtlContinueRx>
 8005926:	e07d      	b.n	8005a24 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2b02      	cmp	r3, #2
 8005934:	d014      	beq.n	8005960 <USBD_LL_DataOutStage+0x98>
 8005936:	2b02      	cmp	r3, #2
 8005938:	d81d      	bhi.n	8005976 <USBD_LL_DataOutStage+0xae>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <USBD_LL_DataOutStage+0x7c>
 800593e:	2b01      	cmp	r3, #1
 8005940:	d003      	beq.n	800594a <USBD_LL_DataOutStage+0x82>
 8005942:	e018      	b.n	8005976 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	75bb      	strb	r3, [r7, #22]
            break;
 8005948:	e018      	b.n	800597c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fa5e 	bl	8005e16 <USBD_CoreFindIF>
 800595a:	4603      	mov	r3, r0
 800595c:	75bb      	strb	r3, [r7, #22]
            break;
 800595e:	e00d      	b.n	800597c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005966:	b2db      	uxtb	r3, r3
 8005968:	4619      	mov	r1, r3
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fa60 	bl	8005e30 <USBD_CoreFindEP>
 8005970:	4603      	mov	r3, r0
 8005972:	75bb      	strb	r3, [r7, #22]
            break;
 8005974:	e002      	b.n	800597c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	75bb      	strb	r3, [r7, #22]
            break;
 800597a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800597c:	7dbb      	ldrb	r3, [r7, #22]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d119      	bne.n	80059b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d113      	bne.n	80059b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800598e:	7dba      	ldrb	r2, [r7, #22]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	32ae      	adds	r2, #174	; 0xae
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800599e:	7dba      	ldrb	r2, [r7, #22]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80059a6:	7dba      	ldrb	r2, [r7, #22]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	32ae      	adds	r2, #174	; 0xae
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f001 f94a 	bl	8006c50 <USBD_CtlSendStatus>
 80059bc:	e032      	b.n	8005a24 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fa31 	bl	8005e30 <USBD_CoreFindEP>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80059d2:	7dbb      	ldrb	r3, [r7, #22]
 80059d4:	2bff      	cmp	r3, #255	; 0xff
 80059d6:	d025      	beq.n	8005a24 <USBD_LL_DataOutStage+0x15c>
 80059d8:	7dbb      	ldrb	r3, [r7, #22]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d122      	bne.n	8005a24 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d117      	bne.n	8005a1a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80059ea:	7dba      	ldrb	r2, [r7, #22]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	32ae      	adds	r2, #174	; 0xae
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80059fa:	7dba      	ldrb	r2, [r7, #22]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005a02:	7dba      	ldrb	r2, [r7, #22]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	32ae      	adds	r2, #174	; 0xae
 8005a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	7afa      	ldrb	r2, [r7, #11]
 8005a10:	4611      	mov	r1, r2
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	4798      	blx	r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	e000      	b.n	8005a26 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b086      	sub	sp, #24
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	460b      	mov	r3, r1
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005a3c:	7afb      	ldrb	r3, [r7, #11]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d16f      	bne.n	8005b22 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3314      	adds	r3, #20
 8005a46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d15a      	bne.n	8005b08 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d914      	bls.n	8005a88 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	1ad2      	subs	r2, r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 f8ac 	bl	8006bd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2100      	movs	r1, #0
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f001 fda3 	bl	80075cc <USBD_LL_PrepareReceive>
 8005a86:	e03f      	b.n	8005b08 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d11c      	bne.n	8005ace <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d316      	bcc.n	8005ace <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d20f      	bcs.n	8005ace <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f001 f88d 	bl	8006bd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f001 fd80 	bl	80075cc <USBD_LL_PrepareReceive>
 8005acc:	e01c      	b.n	8005b08 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d10f      	bne.n	8005afa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f001 fcbb 	bl	8007478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f001 f8b7 	bl	8006c76 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d03a      	beq.n	8005b88 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff fe42 	bl	800579c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005b20:	e032      	b.n	8005b88 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005b22:	7afb      	ldrb	r3, [r7, #11]
 8005b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f97f 	bl	8005e30 <USBD_CoreFindEP>
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2bff      	cmp	r3, #255	; 0xff
 8005b3a:	d025      	beq.n	8005b88 <USBD_LL_DataInStage+0x15a>
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d122      	bne.n	8005b88 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d11c      	bne.n	8005b88 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005b4e:	7dfa      	ldrb	r2, [r7, #23]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	32ae      	adds	r2, #174	; 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d014      	beq.n	8005b88 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005b5e:	7dfa      	ldrb	r2, [r7, #23]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005b66:	7dfa      	ldrb	r2, [r7, #23]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	32ae      	adds	r2, #174	; 0xae
 8005b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	7afa      	ldrb	r2, [r7, #11]
 8005b74:	4611      	mov	r1, r2
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	4798      	blx	r3
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005b7e:	7dbb      	ldrb	r3, [r7, #22]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d001      	beq.n	8005b88 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005b84:	7dbb      	ldrb	r3, [r7, #22]
 8005b86:	e000      	b.n	8005b8a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d014      	beq.n	8005bf8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6852      	ldr	r2, [r2, #4]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	4611      	mov	r1, r2
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bf8:	2340      	movs	r3, #64	; 0x40
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fbf5 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2240      	movs	r2, #64	; 0x40
 8005c10:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005c14:	2340      	movs	r3, #64	; 0x40
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 fbe7 	bl	80073ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2240      	movs	r2, #64	; 0x40
 8005c2a:	621a      	str	r2, [r3, #32]

  return ret;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d106      	bne.n	8005ca4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d110      	bne.n	8005ce8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	32ae      	adds	r2, #174	; 0xae
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e01c      	b.n	8005d4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d115      	bne.n	8005d4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	32ae      	adds	r2, #174	; 0xae
 8005d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	32ae      	adds	r2, #174	; 0xae
 8005d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	4611      	mov	r1, r2
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	32ae      	adds	r2, #174	; 0xae
 8005d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e01c      	b.n	8005db2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d115      	bne.n	8005db0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	32ae      	adds	r2, #174	; 0xae
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	32ae      	adds	r2, #174	; 0xae
 8005da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	4611      	mov	r1, r2
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6852      	ldr	r2, [r2, #4]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005e3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	885b      	ldrh	r3, [r3, #2]
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d920      	bls.n	8005eb4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005e7a:	e013      	b.n	8005ea4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005e7c:	f107 030a 	add.w	r3, r7, #10
 8005e80:	4619      	mov	r1, r3
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f000 f81b 	bl	8005ebe <USBD_GetNextDesc>
 8005e88:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d108      	bne.n	8005ea4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	789b      	ldrb	r3, [r3, #2]
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d008      	beq.n	8005eb2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	885b      	ldrh	r3, [r3, #2]
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d8e5      	bhi.n	8005e7c <USBD_GetEpDesc+0x32>
 8005eb0:	e000      	b.n	8005eb4 <USBD_GetEpDesc+0x6a>
          break;
 8005eb2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005eb4:	693b      	ldr	r3, [r7, #16]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	881a      	ldrh	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	4413      	add	r3, r2
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005eea:	68fb      	ldr	r3, [r7, #12]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f16:	8a3b      	ldrh	r3, [r7, #16]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	b21a      	sxth	r2, r3
 8005f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b21b      	sxth	r3, r3
 8005f24:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005f26:	89fb      	ldrh	r3, [r7, #14]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d005      	beq.n	8005f5a <USBD_StdDevReq+0x26>
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d857      	bhi.n	8006002 <USBD_StdDevReq+0xce>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00f      	beq.n	8005f76 <USBD_StdDevReq+0x42>
 8005f56:	2b20      	cmp	r3, #32
 8005f58:	d153      	bne.n	8006002 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	32ae      	adds	r2, #174	; 0xae
 8005f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]
      break;
 8005f74:	e04a      	b.n	800600c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b09      	cmp	r3, #9
 8005f7c:	d83b      	bhi.n	8005ff6 <USBD_StdDevReq+0xc2>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBD_StdDevReq+0x50>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005fd9 	.word	0x08005fd9
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	08005ff7 	.word	0x08005ff7
 8005f90:	08005fe3 	.word	0x08005fe3
 8005f94:	08005ff7 	.word	0x08005ff7
 8005f98:	08005fb7 	.word	0x08005fb7
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005ff7 	.word	0x08005ff7
 8005fa4:	08005fcf 	.word	0x08005fcf
 8005fa8:	08005fc1 	.word	0x08005fc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005fac:	6839      	ldr	r1, [r7, #0]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa3c 	bl	800642c <USBD_GetDescriptor>
          break;
 8005fb4:	e024      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fba1 	bl	8006700 <USBD_SetAddress>
          break;
 8005fbe:	e01f      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fbe0 	bl	8006788 <USBD_SetConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]
          break;
 8005fcc:	e018      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fc83 	bl	80068dc <USBD_GetConfig>
          break;
 8005fd6:	e013      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fcb4 	bl	8006948 <USBD_GetStatus>
          break;
 8005fe0:	e00e      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005fe2:	6839      	ldr	r1, [r7, #0]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fce3 	bl	80069b0 <USBD_SetFeature>
          break;
 8005fea:	e009      	b.n	8006000 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fd07 	bl	8006a02 <USBD_ClrFeature>
          break;
 8005ff4:	e004      	b.n	8006000 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fd5e 	bl	8006aba <USBD_CtlError>
          break;
 8005ffe:	bf00      	nop
      }
      break;
 8006000:	e004      	b.n	800600c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fd58 	bl	8006aba <USBD_CtlError>
      break;
 800600a:	bf00      	nop
  }

  return ret;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop

08006018 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d005      	beq.n	800603e <USBD_StdItfReq+0x26>
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d852      	bhi.n	80060dc <USBD_StdItfReq+0xc4>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <USBD_StdItfReq+0x26>
 800603a:	2b20      	cmp	r3, #32
 800603c:	d14e      	bne.n	80060dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006044:	b2db      	uxtb	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	2b02      	cmp	r3, #2
 800604a:	d840      	bhi.n	80060ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	889b      	ldrh	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	d836      	bhi.n	80060c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	889b      	ldrh	r3, [r3, #4]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff fed9 	bl	8005e16 <USBD_CoreFindIF>
 8006064:	4603      	mov	r3, r0
 8006066:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	2bff      	cmp	r3, #255	; 0xff
 800606c:	d01d      	beq.n	80060aa <USBD_StdItfReq+0x92>
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11a      	bne.n	80060aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006074:	7bba      	ldrb	r2, [r7, #14]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	32ae      	adds	r2, #174	; 0xae
 800607a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006084:	7bba      	ldrb	r2, [r7, #14]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800608c:	7bba      	ldrb	r2, [r7, #14]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	32ae      	adds	r2, #174	; 0xae
 8006092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060a2:	e004      	b.n	80060ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80060a8:	e001      	b.n	80060ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	88db      	ldrh	r3, [r3, #6]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d110      	bne.n	80060d8 <USBD_StdItfReq+0xc0>
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10d      	bne.n	80060d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fdc7 	bl	8006c50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80060c2:	e009      	b.n	80060d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fcf7 	bl	8006aba <USBD_CtlError>
          break;
 80060cc:	e004      	b.n	80060d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fcf2 	bl	8006aba <USBD_CtlError>
          break;
 80060d6:	e000      	b.n	80060da <USBD_StdItfReq+0xc2>
          break;
 80060d8:	bf00      	nop
      }
      break;
 80060da:	e004      	b.n	80060e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fceb 	bl	8006aba <USBD_CtlError>
      break;
 80060e4:	bf00      	nop
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	889b      	ldrh	r3, [r3, #4]
 8006102:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d007      	beq.n	8006120 <USBD_StdEPReq+0x30>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	f200 817f 	bhi.w	8006414 <USBD_StdEPReq+0x324>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d02a      	beq.n	8006170 <USBD_StdEPReq+0x80>
 800611a:	2b20      	cmp	r3, #32
 800611c:	f040 817a 	bne.w	8006414 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006120:	7bbb      	ldrb	r3, [r7, #14]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fe83 	bl	8005e30 <USBD_CoreFindEP>
 800612a:	4603      	mov	r3, r0
 800612c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800612e:	7b7b      	ldrb	r3, [r7, #13]
 8006130:	2bff      	cmp	r3, #255	; 0xff
 8006132:	f000 8174 	beq.w	800641e <USBD_StdEPReq+0x32e>
 8006136:	7b7b      	ldrb	r3, [r7, #13]
 8006138:	2b00      	cmp	r3, #0
 800613a:	f040 8170 	bne.w	800641e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800613e:	7b7a      	ldrb	r2, [r7, #13]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006146:	7b7a      	ldrb	r2, [r7, #13]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	32ae      	adds	r2, #174	; 0xae
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 8163 	beq.w	800641e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006158:	7b7a      	ldrb	r2, [r7, #13]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	32ae      	adds	r2, #174	; 0xae
 800615e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800616e:	e156      	b.n	800641e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d008      	beq.n	800618a <USBD_StdEPReq+0x9a>
 8006178:	2b03      	cmp	r3, #3
 800617a:	f300 8145 	bgt.w	8006408 <USBD_StdEPReq+0x318>
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 809b 	beq.w	80062ba <USBD_StdEPReq+0x1ca>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d03c      	beq.n	8006202 <USBD_StdEPReq+0x112>
 8006188:	e13e      	b.n	8006408 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d002      	beq.n	800619c <USBD_StdEPReq+0xac>
 8006196:	2b03      	cmp	r3, #3
 8006198:	d016      	beq.n	80061c8 <USBD_StdEPReq+0xd8>
 800619a:	e02c      	b.n	80061f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800619c:	7bbb      	ldrb	r3, [r7, #14]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <USBD_StdEPReq+0xce>
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d00a      	beq.n	80061be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80061a8:	7bbb      	ldrb	r3, [r7, #14]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f963 	bl	8007478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 f95f 	bl	8007478 <USBD_LL_StallEP>
 80061ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061bc:	e020      	b.n	8006200 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fc7a 	bl	8006aba <USBD_CtlError>
              break;
 80061c6:	e01b      	b.n	8006200 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	885b      	ldrh	r3, [r3, #2]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10e      	bne.n	80061ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <USBD_StdEPReq+0xfe>
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d008      	beq.n	80061ee <USBD_StdEPReq+0xfe>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	88db      	ldrh	r3, [r3, #6]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 f945 	bl	8007478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fd2e 	bl	8006c50 <USBD_CtlSendStatus>

              break;
 80061f4:	e004      	b.n	8006200 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc5e 	bl	8006aba <USBD_CtlError>
              break;
 80061fe:	bf00      	nop
          }
          break;
 8006200:	e107      	b.n	8006412 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d002      	beq.n	8006214 <USBD_StdEPReq+0x124>
 800620e:	2b03      	cmp	r3, #3
 8006210:	d016      	beq.n	8006240 <USBD_StdEPReq+0x150>
 8006212:	e04b      	b.n	80062ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00d      	beq.n	8006236 <USBD_StdEPReq+0x146>
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d00a      	beq.n	8006236 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006220:	7bbb      	ldrb	r3, [r7, #14]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 f927 	bl	8007478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f923 	bl	8007478 <USBD_LL_StallEP>
 8006232:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006234:	e040      	b.n	80062b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006236:	6839      	ldr	r1, [r7, #0]
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fc3e 	bl	8006aba <USBD_CtlError>
              break;
 800623e:	e03b      	b.n	80062b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	885b      	ldrh	r3, [r3, #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d136      	bne.n	80062b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006252:	7bbb      	ldrb	r3, [r7, #14]
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 f92d 	bl	80074b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fcf7 	bl	8006c50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fde2 	bl	8005e30 <USBD_CoreFindEP>
 800626c:	4603      	mov	r3, r0
 800626e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006270:	7b7b      	ldrb	r3, [r7, #13]
 8006272:	2bff      	cmp	r3, #255	; 0xff
 8006274:	d01f      	beq.n	80062b6 <USBD_StdEPReq+0x1c6>
 8006276:	7b7b      	ldrb	r3, [r7, #13]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11c      	bne.n	80062b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800627c:	7b7a      	ldrb	r2, [r7, #13]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006284:	7b7a      	ldrb	r2, [r7, #13]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32ae      	adds	r2, #174	; 0xae
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d010      	beq.n	80062b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006294:	7b7a      	ldrb	r2, [r7, #13]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	32ae      	adds	r2, #174	; 0xae
 800629a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80062aa:	e004      	b.n	80062b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fc03 	bl	8006aba <USBD_CtlError>
              break;
 80062b4:	e000      	b.n	80062b8 <USBD_StdEPReq+0x1c8>
              break;
 80062b6:	bf00      	nop
          }
          break;
 80062b8:	e0ab      	b.n	8006412 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d002      	beq.n	80062cc <USBD_StdEPReq+0x1dc>
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d032      	beq.n	8006330 <USBD_StdEPReq+0x240>
 80062ca:	e097      	b.n	80063fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <USBD_StdEPReq+0x1f2>
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	2b80      	cmp	r3, #128	; 0x80
 80062d6:	d004      	beq.n	80062e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fbed 	bl	8006aba <USBD_CtlError>
                break;
 80062e0:	e091      	b.n	8006406 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da0b      	bge.n	8006302 <USBD_StdEPReq+0x212>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	3310      	adds	r3, #16
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	3304      	adds	r3, #4
 8006300:	e00b      	b.n	800631a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006302:	7bbb      	ldrb	r3, [r7, #14]
 8006304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	4413      	add	r3, r2
 8006318:	3304      	adds	r3, #4
 800631a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2202      	movs	r2, #2
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc37 	bl	8006b9c <USBD_CtlSendData>
              break;
 800632e:	e06a      	b.n	8006406 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006330:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da11      	bge.n	800635c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	440b      	add	r3, r1
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d117      	bne.n	8006382 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbb0 	bl	8006aba <USBD_CtlError>
                  break;
 800635a:	e054      	b.n	8006406 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800635c:	7bbb      	ldrb	r3, [r7, #14]
 800635e:	f003 020f 	and.w	r2, r3, #15
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	440b      	add	r3, r1
 800636e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 fb9d 	bl	8006aba <USBD_CtlError>
                  break;
 8006380:	e041      	b.n	8006406 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006382:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	da0b      	bge.n	80063a2 <USBD_StdEPReq+0x2b2>
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	3310      	adds	r3, #16
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	4413      	add	r3, r2
 800639e:	3304      	adds	r3, #4
 80063a0:	e00b      	b.n	80063ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063a8:	4613      	mov	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	3304      	adds	r3, #4
 80063ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <USBD_StdEPReq+0x2d8>
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d103      	bne.n	80063d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e00e      	b.n	80063ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f88d 	bl	80074f4 <USBD_LL_IsStallEP>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2201      	movs	r2, #1
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2202      	movs	r2, #2
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fbd1 	bl	8006b9c <USBD_CtlSendData>
              break;
 80063fa:	e004      	b.n	8006406 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fb5b 	bl	8006aba <USBD_CtlError>
              break;
 8006404:	bf00      	nop
          }
          break;
 8006406:	e004      	b.n	8006412 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fb55 	bl	8006aba <USBD_CtlError>
          break;
 8006410:	bf00      	nop
      }
      break;
 8006412:	e005      	b.n	8006420 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fb4f 	bl	8006aba <USBD_CtlError>
      break;
 800641c:	e000      	b.n	8006420 <USBD_StdEPReq+0x330>
      break;
 800641e:	bf00      	nop
  }

  return ret;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	885b      	ldrh	r3, [r3, #2]
 8006446:	0a1b      	lsrs	r3, r3, #8
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	2b06      	cmp	r3, #6
 800644e:	f200 8128 	bhi.w	80066a2 <USBD_GetDescriptor+0x276>
 8006452:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <USBD_GetDescriptor+0x2c>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	08006475 	.word	0x08006475
 800645c:	0800648d 	.word	0x0800648d
 8006460:	080064cd 	.word	0x080064cd
 8006464:	080066a3 	.word	0x080066a3
 8006468:	080066a3 	.word	0x080066a3
 800646c:	08006643 	.word	0x08006643
 8006470:	0800666f 	.word	0x0800666f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	7c12      	ldrb	r2, [r2, #16]
 8006480:	f107 0108 	add.w	r1, r7, #8
 8006484:	4610      	mov	r0, r2
 8006486:	4798      	blx	r3
 8006488:	60f8      	str	r0, [r7, #12]
      break;
 800648a:	e112      	b.n	80066b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7c1b      	ldrb	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10d      	bne.n	80064b0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f107 0208 	add.w	r2, r7, #8
 80064a0:	4610      	mov	r0, r2
 80064a2:	4798      	blx	r3
 80064a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	2202      	movs	r2, #2
 80064ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80064ae:	e100      	b.n	80066b2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	f107 0208 	add.w	r2, r7, #8
 80064bc:	4610      	mov	r0, r2
 80064be:	4798      	blx	r3
 80064c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3301      	adds	r3, #1
 80064c6:	2202      	movs	r2, #2
 80064c8:	701a      	strb	r2, [r3, #0]
      break;
 80064ca:	e0f2      	b.n	80066b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	885b      	ldrh	r3, [r3, #2]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	f200 80ac 	bhi.w	8006630 <USBD_GetDescriptor+0x204>
 80064d8:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <USBD_GetDescriptor+0xb4>)
 80064da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064de:	bf00      	nop
 80064e0:	080064f9 	.word	0x080064f9
 80064e4:	0800652d 	.word	0x0800652d
 80064e8:	08006561 	.word	0x08006561
 80064ec:	08006595 	.word	0x08006595
 80064f0:	080065c9 	.word	0x080065c9
 80064f4:	080065fd 	.word	0x080065fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00b      	beq.n	800651c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	7c12      	ldrb	r2, [r2, #16]
 8006510:	f107 0108 	add.w	r1, r7, #8
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
 8006518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800651a:	e091      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 facb 	bl	8006aba <USBD_CtlError>
            err++;
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	3301      	adds	r3, #1
 8006528:	72fb      	strb	r3, [r7, #11]
          break;
 800652a:	e089      	b.n	8006640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	7c12      	ldrb	r2, [r2, #16]
 8006544:	f107 0108 	add.w	r1, r7, #8
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
 800654c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800654e:	e077      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fab1 	bl	8006aba <USBD_CtlError>
            err++;
 8006558:	7afb      	ldrb	r3, [r7, #11]
 800655a:	3301      	adds	r3, #1
 800655c:	72fb      	strb	r3, [r7, #11]
          break;
 800655e:	e06f      	b.n	8006640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	7c12      	ldrb	r2, [r2, #16]
 8006578:	f107 0108 	add.w	r1, r7, #8
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
 8006580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006582:	e05d      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa97 	bl	8006aba <USBD_CtlError>
            err++;
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	3301      	adds	r3, #1
 8006590:	72fb      	strb	r3, [r7, #11]
          break;
 8006592:	e055      	b.n	8006640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	7c12      	ldrb	r2, [r2, #16]
 80065ac:	f107 0108 	add.w	r1, r7, #8
 80065b0:	4610      	mov	r0, r2
 80065b2:	4798      	blx	r3
 80065b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065b6:	e043      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa7d 	bl	8006aba <USBD_CtlError>
            err++;
 80065c0:	7afb      	ldrb	r3, [r7, #11]
 80065c2:	3301      	adds	r3, #1
 80065c4:	72fb      	strb	r3, [r7, #11]
          break;
 80065c6:	e03b      	b.n	8006640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	7c12      	ldrb	r2, [r2, #16]
 80065e0:	f107 0108 	add.w	r1, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ea:	e029      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa63 	bl	8006aba <USBD_CtlError>
            err++;
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	3301      	adds	r3, #1
 80065f8:	72fb      	strb	r3, [r7, #11]
          break;
 80065fa:	e021      	b.n	8006640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	7c12      	ldrb	r2, [r2, #16]
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	4610      	mov	r0, r2
 800661a:	4798      	blx	r3
 800661c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800661e:	e00f      	b.n	8006640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa49 	bl	8006aba <USBD_CtlError>
            err++;
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	3301      	adds	r3, #1
 800662c:	72fb      	strb	r3, [r7, #11]
          break;
 800662e:	e007      	b.n	8006640 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fa41 	bl	8006aba <USBD_CtlError>
          err++;
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	3301      	adds	r3, #1
 800663c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800663e:	bf00      	nop
      }
      break;
 8006640:	e037      	b.n	80066b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	7c1b      	ldrb	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	f107 0208 	add.w	r2, r7, #8
 8006656:	4610      	mov	r0, r2
 8006658:	4798      	blx	r3
 800665a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800665c:	e029      	b.n	80066b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa2a 	bl	8006aba <USBD_CtlError>
        err++;
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	3301      	adds	r3, #1
 800666a:	72fb      	strb	r3, [r7, #11]
      break;
 800666c:	e021      	b.n	80066b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7c1b      	ldrb	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10d      	bne.n	8006692 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f107 0208 	add.w	r2, r7, #8
 8006682:	4610      	mov	r0, r2
 8006684:	4798      	blx	r3
 8006686:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	2207      	movs	r2, #7
 800668e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006690:	e00f      	b.n	80066b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fa10 	bl	8006aba <USBD_CtlError>
        err++;
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	3301      	adds	r3, #1
 800669e:	72fb      	strb	r3, [r7, #11]
      break;
 80066a0:	e007      	b.n	80066b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa08 	bl	8006aba <USBD_CtlError>
      err++;
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	3301      	adds	r3, #1
 80066ae:	72fb      	strb	r3, [r7, #11]
      break;
 80066b0:	bf00      	nop
  }

  if (err != 0U)
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11e      	bne.n	80066f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	88db      	ldrh	r3, [r3, #6]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80066c0:	893b      	ldrh	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00e      	beq.n	80066e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	88da      	ldrh	r2, [r3, #6]
 80066ca:	893b      	ldrh	r3, [r7, #8]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	bf28      	it	cs
 80066d0:	4613      	movcs	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066d6:	893b      	ldrh	r3, [r7, #8]
 80066d8:	461a      	mov	r2, r3
 80066da:	68f9      	ldr	r1, [r7, #12]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa5d 	bl	8006b9c <USBD_CtlSendData>
 80066e2:	e009      	b.n	80066f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80066e4:	6839      	ldr	r1, [r7, #0]
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f9e7 	bl	8006aba <USBD_CtlError>
 80066ec:	e004      	b.n	80066f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 faae 	bl	8006c50 <USBD_CtlSendStatus>
 80066f4:	e000      	b.n	80066f8 <USBD_GetDescriptor+0x2cc>
    return;
 80066f6:	bf00      	nop
  }
}
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop

08006700 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	889b      	ldrh	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d131      	bne.n	8006776 <USBD_SetAddress+0x76>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	88db      	ldrh	r3, [r3, #6]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d12d      	bne.n	8006776 <USBD_SetAddress+0x76>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	885b      	ldrh	r3, [r3, #2]
 800671e:	2b7f      	cmp	r3, #127	; 0x7f
 8006720:	d829      	bhi.n	8006776 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	885b      	ldrh	r3, [r3, #2]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800672c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d104      	bne.n	8006744 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f9bc 	bl	8006aba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006742:	e01d      	b.n	8006780 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fefb 	bl	800754c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa7a 	bl	8006c50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d004      	beq.n	800676c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	e009      	b.n	8006780 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	e004      	b.n	8006780 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f99e 	bl	8006aba <USBD_CtlError>
  }
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	b2da      	uxtb	r2, r3
 800679c:	4b4e      	ldr	r3, [pc, #312]	; (80068d8 <USBD_SetConfig+0x150>)
 800679e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80067a0:	4b4d      	ldr	r3, [pc, #308]	; (80068d8 <USBD_SetConfig+0x150>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d905      	bls.n	80067b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f985 	bl	8006aba <USBD_CtlError>
    return USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e08c      	b.n	80068ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d002      	beq.n	80067c6 <USBD_SetConfig+0x3e>
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d029      	beq.n	8006818 <USBD_SetConfig+0x90>
 80067c4:	e075      	b.n	80068b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80067c6:	4b44      	ldr	r3, [pc, #272]	; (80068d8 <USBD_SetConfig+0x150>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d020      	beq.n	8006810 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80067ce:	4b42      	ldr	r3, [pc, #264]	; (80068d8 <USBD_SetConfig+0x150>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80067d8:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <USBD_SetConfig+0x150>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fe ffe7 	bl	80057b2 <USBD_SetClassConfig>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f962 	bl	8006aba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80067fe:	e065      	b.n	80068cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa25 	bl	8006c50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800680e:	e05d      	b.n	80068cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fa1d 	bl	8006c50 <USBD_CtlSendStatus>
      break;
 8006816:	e059      	b.n	80068cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006818:	4b2f      	ldr	r3, [pc, #188]	; (80068d8 <USBD_SetConfig+0x150>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d112      	bne.n	8006846 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006828:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <USBD_SetConfig+0x150>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006832:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <USBD_SetConfig+0x150>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fe ffd6 	bl	80057ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa06 	bl	8006c50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006844:	e042      	b.n	80068cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006846:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <USBD_SetConfig+0x150>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d02a      	beq.n	80068aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fe ffc4 	bl	80057ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006862:	4b1d      	ldr	r3, [pc, #116]	; (80068d8 <USBD_SetConfig+0x150>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800686c:	4b1a      	ldr	r3, [pc, #104]	; (80068d8 <USBD_SetConfig+0x150>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7fe ff9d 	bl	80057b2 <USBD_SetClassConfig>
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00f      	beq.n	80068a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006882:	6839      	ldr	r1, [r7, #0]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f918 	bl	8006aba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fe ffa9 	bl	80057ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068a0:	e014      	b.n	80068cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f9d4 	bl	8006c50 <USBD_CtlSendStatus>
      break;
 80068a8:	e010      	b.n	80068cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9d0 	bl	8006c50 <USBD_CtlSendStatus>
      break;
 80068b0:	e00c      	b.n	80068cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f900 	bl	8006aba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <USBD_SetConfig+0x150>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7fe ff92 	bl	80057ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ca:	bf00      	nop
  }

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000164 	.word	0x20000164

080068dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	88db      	ldrh	r3, [r3, #6]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d004      	beq.n	80068f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8e2 	bl	8006aba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80068f6:	e023      	b.n	8006940 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	dc02      	bgt.n	800690a <USBD_GetConfig+0x2e>
 8006904:	2b00      	cmp	r3, #0
 8006906:	dc03      	bgt.n	8006910 <USBD_GetConfig+0x34>
 8006908:	e015      	b.n	8006936 <USBD_GetConfig+0x5a>
 800690a:	2b03      	cmp	r3, #3
 800690c:	d00b      	beq.n	8006926 <USBD_GetConfig+0x4a>
 800690e:	e012      	b.n	8006936 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3308      	adds	r3, #8
 800691a:	2201      	movs	r2, #1
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f93c 	bl	8006b9c <USBD_CtlSendData>
        break;
 8006924:	e00c      	b.n	8006940 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3304      	adds	r3, #4
 800692a:	2201      	movs	r2, #1
 800692c:	4619      	mov	r1, r3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f934 	bl	8006b9c <USBD_CtlSendData>
        break;
 8006934:	e004      	b.n	8006940 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f8be 	bl	8006aba <USBD_CtlError>
        break;
 800693e:	bf00      	nop
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006958:	b2db      	uxtb	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	2b02      	cmp	r3, #2
 800695e:	d81e      	bhi.n	800699e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	88db      	ldrh	r3, [r3, #6]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d004      	beq.n	8006972 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8a5 	bl	8006aba <USBD_CtlError>
        break;
 8006970:	e01a      	b.n	80069a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 0202 	orr.w	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	330c      	adds	r3, #12
 8006992:	2202      	movs	r2, #2
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f900 	bl	8006b9c <USBD_CtlSendData>
      break;
 800699c:	e004      	b.n	80069a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f88a 	bl	8006aba <USBD_CtlError>
      break;
 80069a6:	bf00      	nop
  }
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	885b      	ldrh	r3, [r3, #2]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d107      	bne.n	80069d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f940 	bl	8006c50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80069d0:	e013      	b.n	80069fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	885b      	ldrh	r3, [r3, #2]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d10b      	bne.n	80069f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	889b      	ldrh	r3, [r3, #4]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f930 	bl	8006c50 <USBD_CtlSendStatus>
}
 80069f0:	e003      	b.n	80069fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f860 	bl	8006aba <USBD_CtlError>
}
 80069fa:	bf00      	nop
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d80b      	bhi.n	8006a32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	885b      	ldrh	r3, [r3, #2]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10c      	bne.n	8006a3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f910 	bl	8006c50 <USBD_CtlSendStatus>
      }
      break;
 8006a30:	e004      	b.n	8006a3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f840 	bl	8006aba <USBD_CtlError>
      break;
 8006a3a:	e000      	b.n	8006a3e <USBD_ClrFeature+0x3c>
      break;
 8006a3c:	bf00      	nop
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	781a      	ldrb	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff fa41 	bl	8005ef8 <SWAPBYTE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff fa34 	bl	8005ef8 <SWAPBYTE>
 8006a90:	4603      	mov	r3, r0
 8006a92:	461a      	mov	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f7ff fa27 	bl	8005ef8 <SWAPBYTE>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	80da      	strh	r2, [r3, #6]
}
 8006ab2:	bf00      	nop
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fcd6 	bl	8007478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006acc:	2100      	movs	r1, #0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fcd2 	bl	8007478 <USBD_LL_StallEP>
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d036      	beq.n	8006b60 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006af6:	6938      	ldr	r0, [r7, #16]
 8006af8:	f000 f836 	bl	8006b68 <USBD_GetLen>
 8006afc:	4603      	mov	r3, r0
 8006afe:	3301      	adds	r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	4413      	add	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4413      	add	r3, r2
 8006b22:	2203      	movs	r2, #3
 8006b24:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006b2c:	e013      	b.n	8006b56 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	4413      	add	r3, r2
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	7812      	ldrb	r2, [r2, #0]
 8006b38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
    idx++;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	3301      	adds	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	3301      	adds	r3, #1
 8006b54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1e7      	bne.n	8006b2e <USBD_GetString+0x52>
 8006b5e:	e000      	b.n	8006b62 <USBD_GetString+0x86>
    return;
 8006b60:	bf00      	nop
  }
}
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006b78:	e005      	b.n	8006b86 <USBD_GetLen+0x1e>
  {
    len++;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f5      	bne.n	8006b7a <USBD_GetLen+0x12>
  }

  return len;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fce1 	bl	800758a <USBD_LL_Transmit>

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	2100      	movs	r1, #0
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fcd0 	bl	800758a <USBD_LL_Transmit>

  return USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2203      	movs	r2, #3
 8006c04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fcd4 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	2100      	movs	r1, #0
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fcc3 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006c60:	2300      	movs	r3, #0
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fc8f 	bl	800758a <USBD_LL_Transmit>

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2205      	movs	r2, #5
 8006c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c86:	2300      	movs	r3, #0
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc9d 	bl	80075cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	4912      	ldr	r1, [pc, #72]	; (8006cec <MX_USB_DEVICE_Init+0x50>)
 8006ca4:	4812      	ldr	r0, [pc, #72]	; (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006ca6:	f7fe fd07 	bl	80056b8 <USBD_Init>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006cb0:	f7f9 fe1a 	bl	80008e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006cb4:	490f      	ldr	r1, [pc, #60]	; (8006cf4 <MX_USB_DEVICE_Init+0x58>)
 8006cb6:	480e      	ldr	r0, [pc, #56]	; (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cb8:	f7fe fd2e 	bl	8005718 <USBD_RegisterClass>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006cc2:	f7f9 fe11 	bl	80008e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cc6:	490c      	ldr	r1, [pc, #48]	; (8006cf8 <MX_USB_DEVICE_Init+0x5c>)
 8006cc8:	4809      	ldr	r0, [pc, #36]	; (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cca:	f7fe fc1f 	bl	800550c <USBD_CDC_RegisterInterface>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006cd4:	f7f9 fe08 	bl	80008e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cd8:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <MX_USB_DEVICE_Init+0x54>)
 8006cda:	f7fe fd53 	bl	8005784 <USBD_Start>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006ce4:	f7f9 fe00 	bl	80008e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ce8:	bf00      	nop
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200000ac 	.word	0x200000ac
 8006cf0:	20000168 	.word	0x20000168
 8006cf4:	20000018 	.word	0x20000018
 8006cf8:	20000098 	.word	0x20000098

08006cfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d00:	2200      	movs	r2, #0
 8006d02:	4905      	ldr	r1, [pc, #20]	; (8006d18 <CDC_Init_FS+0x1c>)
 8006d04:	4805      	ldr	r0, [pc, #20]	; (8006d1c <CDC_Init_FS+0x20>)
 8006d06:	f7fe fc1b 	bl	8005540 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d0a:	4905      	ldr	r1, [pc, #20]	; (8006d20 <CDC_Init_FS+0x24>)
 8006d0c:	4803      	ldr	r0, [pc, #12]	; (8006d1c <CDC_Init_FS+0x20>)
 8006d0e:	f7fe fc39 	bl	8005584 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000844 	.word	0x20000844
 8006d1c:	20000168 	.word	0x20000168
 8006d20:	20000444 	.word	0x20000444

08006d24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006d28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b23      	cmp	r3, #35	; 0x23
 8006d48:	d84a      	bhi.n	8006de0 <CDC_Control_FS+0xac>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <CDC_Control_FS+0x1c>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006de1 	.word	0x08006de1
 8006d54:	08006de1 	.word	0x08006de1
 8006d58:	08006de1 	.word	0x08006de1
 8006d5c:	08006de1 	.word	0x08006de1
 8006d60:	08006de1 	.word	0x08006de1
 8006d64:	08006de1 	.word	0x08006de1
 8006d68:	08006de1 	.word	0x08006de1
 8006d6c:	08006de1 	.word	0x08006de1
 8006d70:	08006de1 	.word	0x08006de1
 8006d74:	08006de1 	.word	0x08006de1
 8006d78:	08006de1 	.word	0x08006de1
 8006d7c:	08006de1 	.word	0x08006de1
 8006d80:	08006de1 	.word	0x08006de1
 8006d84:	08006de1 	.word	0x08006de1
 8006d88:	08006de1 	.word	0x08006de1
 8006d8c:	08006de1 	.word	0x08006de1
 8006d90:	08006de1 	.word	0x08006de1
 8006d94:	08006de1 	.word	0x08006de1
 8006d98:	08006de1 	.word	0x08006de1
 8006d9c:	08006de1 	.word	0x08006de1
 8006da0:	08006de1 	.word	0x08006de1
 8006da4:	08006de1 	.word	0x08006de1
 8006da8:	08006de1 	.word	0x08006de1
 8006dac:	08006de1 	.word	0x08006de1
 8006db0:	08006de1 	.word	0x08006de1
 8006db4:	08006de1 	.word	0x08006de1
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de1 	.word	0x08006de1
 8006dc0:	08006de1 	.word	0x08006de1
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006de1 	.word	0x08006de1
 8006dd8:	08006de1 	.word	0x08006de1
 8006ddc:	08006de1 	.word	0x08006de1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006de0:	bf00      	nop
  }

  return (USBD_OK);
 8006de2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4805      	ldr	r0, [pc, #20]	; (8006e14 <CDC_Receive_FS+0x24>)
 8006dfe:	f7fe fbc1 	bl	8005584 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e02:	4804      	ldr	r0, [pc, #16]	; (8006e14 <CDC_Receive_FS+0x24>)
 8006e04:	f7fe fc22 	bl	800564c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000168 	.word	0x20000168

08006e18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e28:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <CDC_Transmit_FS+0x48>)
 8006e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e00b      	b.n	8006e56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e3e:	887b      	ldrh	r3, [r7, #2]
 8006e40:	461a      	mov	r2, r3
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	4806      	ldr	r0, [pc, #24]	; (8006e60 <CDC_Transmit_FS+0x48>)
 8006e46:	f7fe fb7b 	bl	8005540 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e4a:	4805      	ldr	r0, [pc, #20]	; (8006e60 <CDC_Transmit_FS+0x48>)
 8006e4c:	f7fe fbb8 	bl	80055c0 <USBD_CDC_TransmitPacket>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000168 	.word	0x20000168

08006e64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2212      	movs	r2, #18
 8006e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e9a:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	200000c8 	.word	0x200000c8

08006eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	6039      	str	r1, [r7, #0]
 8006eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ebe:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200000dc 	.word	0x200000dc

08006ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	6039      	str	r1, [r7, #0]
 8006eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d105      	bne.n	8006eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4907      	ldr	r1, [pc, #28]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ee6:	4808      	ldr	r0, [pc, #32]	; (8006f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ee8:	f7ff fdf8 	bl	8006adc <USBD_GetString>
 8006eec:	e004      	b.n	8006ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	4904      	ldr	r1, [pc, #16]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ef2:	4805      	ldr	r0, [pc, #20]	; (8006f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ef4:	f7ff fdf2 	bl	8006adc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ef8:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000c44 	.word	0x20000c44
 8006f08:	0800772c 	.word	0x0800772c

08006f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	6039      	str	r1, [r7, #0]
 8006f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	4904      	ldr	r1, [pc, #16]	; (8006f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f1c:	4804      	ldr	r0, [pc, #16]	; (8006f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f1e:	f7ff fddd 	bl	8006adc <USBD_GetString>
  return USBD_StrDesc;
 8006f22:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000c44 	.word	0x20000c44
 8006f30:	08007744 	.word	0x08007744

08006f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	6039      	str	r1, [r7, #0]
 8006f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	221a      	movs	r2, #26
 8006f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f46:	f000 f843 	bl	8006fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f4a:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	200000e0 	.word	0x200000e0

08006f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	4603      	mov	r3, r0
 8006f60:	6039      	str	r1, [r7, #0]
 8006f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4907      	ldr	r1, [pc, #28]	; (8006f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f6e:	4808      	ldr	r0, [pc, #32]	; (8006f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f70:	f7ff fdb4 	bl	8006adc <USBD_GetString>
 8006f74:	e004      	b.n	8006f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4904      	ldr	r1, [pc, #16]	; (8006f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f7c:	f7ff fdae 	bl	8006adc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f80:	4b02      	ldr	r3, [pc, #8]	; (8006f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000c44 	.word	0x20000c44
 8006f90:	08007758 	.word	0x08007758

08006f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4907      	ldr	r1, [pc, #28]	; (8006fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006faa:	4808      	ldr	r0, [pc, #32]	; (8006fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fac:	f7ff fd96 	bl	8006adc <USBD_GetString>
 8006fb0:	e004      	b.n	8006fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	4904      	ldr	r1, [pc, #16]	; (8006fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fb6:	4805      	ldr	r0, [pc, #20]	; (8006fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fb8:	f7ff fd90 	bl	8006adc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fbc:	4b02      	ldr	r3, [pc, #8]	; (8006fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000c44 	.word	0x20000c44
 8006fcc:	08007764 	.word	0x08007764

08006fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <Get_SerialNum+0x44>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <Get_SerialNum+0x48>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fe2:	4b0e      	ldr	r3, [pc, #56]	; (800701c <Get_SerialNum+0x4c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4413      	add	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	4909      	ldr	r1, [pc, #36]	; (8007020 <Get_SerialNum+0x50>)
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f814 	bl	8007028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007000:	2204      	movs	r2, #4
 8007002:	4908      	ldr	r1, [pc, #32]	; (8007024 <Get_SerialNum+0x54>)
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	f000 f80f 	bl	8007028 <IntToUnicode>
  }
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	1fff7a10 	.word	0x1fff7a10
 8007018:	1fff7a14 	.word	0x1fff7a14
 800701c:	1fff7a18 	.word	0x1fff7a18
 8007020:	200000e2 	.word	0x200000e2
 8007024:	200000f2 	.word	0x200000f2

08007028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	4613      	mov	r3, r2
 8007034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007036:	2300      	movs	r3, #0
 8007038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800703a:	2300      	movs	r3, #0
 800703c:	75fb      	strb	r3, [r7, #23]
 800703e:	e027      	b.n	8007090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	0f1b      	lsrs	r3, r3, #28
 8007044:	2b09      	cmp	r3, #9
 8007046:	d80b      	bhi.n	8007060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	0f1b      	lsrs	r3, r3, #28
 800704c:	b2da      	uxtb	r2, r3
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4619      	mov	r1, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	440b      	add	r3, r1
 8007058:	3230      	adds	r2, #48	; 0x30
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	e00a      	b.n	8007076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	0f1b      	lsrs	r3, r3, #28
 8007064:	b2da      	uxtb	r2, r3
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4619      	mov	r1, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	440b      	add	r3, r1
 8007070:	3237      	adds	r2, #55	; 0x37
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	3301      	adds	r3, #1
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	4413      	add	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	3301      	adds	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
 8007090:	7dfa      	ldrb	r2, [r7, #23]
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	429a      	cmp	r2, r3
 8007096:	d3d3      	bcc.n	8007040 <IntToUnicode+0x18>
  }
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b0:	f107 0314 	add.w	r3, r7, #20
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	605a      	str	r2, [r3, #4]
 80070ba:	609a      	str	r2, [r3, #8]
 80070bc:	60da      	str	r2, [r3, #12]
 80070be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c8:	d13a      	bne.n	8007140 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 80070d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d2:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 80070d4:	f043 0301 	orr.w	r3, r3, #1
 80070d8:	6313      	str	r3, [r2, #48]	; 0x30
 80070da:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80070e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80070ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ec:	2302      	movs	r3, #2
 80070ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070f4:	2303      	movs	r3, #3
 80070f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80070f8:	230a      	movs	r3, #10
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070fc:	f107 0314 	add.w	r3, r7, #20
 8007100:	4619      	mov	r1, r3
 8007102:	4812      	ldr	r0, [pc, #72]	; (800714c <HAL_PCD_MspInit+0xa4>)
 8007104:	f7f9 fe58 	bl	8000db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 800710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710c:	4a0e      	ldr	r2, [pc, #56]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 800710e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007112:	6353      	str	r3, [r2, #52]	; 0x34
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 800711a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711c:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 800711e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007122:	6453      	str	r3, [r2, #68]	; 0x44
 8007124:	4b08      	ldr	r3, [pc, #32]	; (8007148 <HAL_PCD_MspInit+0xa0>)
 8007126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007130:	2200      	movs	r2, #0
 8007132:	2100      	movs	r1, #0
 8007134:	2043      	movs	r0, #67	; 0x43
 8007136:	f7f9 fe08 	bl	8000d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800713a:	2043      	movs	r0, #67	; 0x43
 800713c:	f7f9 fe21 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007140:	bf00      	nop
 8007142:	3728      	adds	r7, #40	; 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40023800 	.word	0x40023800
 800714c:	40020000 	.word	0x40020000

08007150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fe fb59 	bl	800581e <USBD_LL_SetupStage>
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007186:	78fa      	ldrb	r2, [r7, #3]
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	78fb      	ldrb	r3, [r7, #3]
 800719c:	4619      	mov	r1, r3
 800719e:	f7fe fb93 	bl	80058c8 <USBD_LL_DataOutStage>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80071bc:	78fa      	ldrb	r2, [r7, #3]
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	334c      	adds	r3, #76	; 0x4c
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	4619      	mov	r1, r3
 80071d2:	f7fe fc2c 	bl	8005a2e <USBD_LL_DataInStage>
}
 80071d6:	bf00      	nop
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b082      	sub	sp, #8
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe fd60 	bl	8005cb2 <USBD_LL_SOF>
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007202:	2301      	movs	r3, #1
 8007204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d001      	beq.n	8007212 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800720e:	f7f9 fb6b 	bl	80008e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007218:	7bfa      	ldrb	r2, [r7, #15]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fd0a 	bl	8005c36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fcb2 	bl	8005b92 <USBD_LL_Reset>
}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fd05 	bl	8005c56 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <HAL_PCD_SuspendCallback+0x48>)
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	4a03      	ldr	r2, [pc, #12]	; (8007280 <HAL_PCD_SuspendCallback+0x48>)
 8007272:	f043 0306 	orr.w	r3, r3, #6
 8007276:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	e000ed00 	.word	0xe000ed00

08007284 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fcf5 	bl	8005c82 <USBD_LL_Resume>
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fd4d 	bl	8005d56 <USBD_LL_IsoOUTIncomplete>
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fd09 	bl	8005cf2 <USBD_LL_IsoINIncomplete>
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fd5f 	bl	8005dba <USBD_LL_DevConnected>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fd5c 	bl	8005dd0 <USBD_LL_DevDisconnected>
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d13c      	bne.n	80073aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007330:	4a20      	ldr	r2, [pc, #128]	; (80073b4 <USBD_LL_Init+0x94>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1e      	ldr	r2, [pc, #120]	; (80073b4 <USBD_LL_Init+0x94>)
 800733c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007340:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <USBD_LL_Init+0x94>)
 8007342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007346:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <USBD_LL_Init+0x94>)
 800734a:	2204      	movs	r2, #4
 800734c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <USBD_LL_Init+0x94>)
 8007350:	2202      	movs	r2, #2
 8007352:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007354:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <USBD_LL_Init+0x94>)
 8007356:	2200      	movs	r2, #0
 8007358:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800735a:	4b16      	ldr	r3, [pc, #88]	; (80073b4 <USBD_LL_Init+0x94>)
 800735c:	2202      	movs	r2, #2
 800735e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007360:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <USBD_LL_Init+0x94>)
 8007362:	2200      	movs	r2, #0
 8007364:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <USBD_LL_Init+0x94>)
 8007368:	2200      	movs	r2, #0
 800736a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <USBD_LL_Init+0x94>)
 800736e:	2200      	movs	r2, #0
 8007370:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <USBD_LL_Init+0x94>)
 8007374:	2200      	movs	r2, #0
 8007376:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007378:	4b0e      	ldr	r3, [pc, #56]	; (80073b4 <USBD_LL_Init+0x94>)
 800737a:	2200      	movs	r2, #0
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800737e:	480d      	ldr	r0, [pc, #52]	; (80073b4 <USBD_LL_Init+0x94>)
 8007380:	f7f9 fecf 	bl	8001122 <HAL_PCD_Init>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800738a:	f7f9 faad 	bl	80008e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800738e:	2180      	movs	r1, #128	; 0x80
 8007390:	4808      	ldr	r0, [pc, #32]	; (80073b4 <USBD_LL_Init+0x94>)
 8007392:	f7fb f926 	bl	80025e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007396:	2240      	movs	r2, #64	; 0x40
 8007398:	2100      	movs	r1, #0
 800739a:	4806      	ldr	r0, [pc, #24]	; (80073b4 <USBD_LL_Init+0x94>)
 800739c:	f7fb f8da 	bl	8002554 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073a0:	2280      	movs	r2, #128	; 0x80
 80073a2:	2101      	movs	r1, #1
 80073a4:	4803      	ldr	r0, [pc, #12]	; (80073b4 <USBD_LL_Init+0x94>)
 80073a6:	f7fb f8d5 	bl	8002554 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000e44 	.word	0x20000e44

080073b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7f9 ffc4 	bl	800135c <HAL_PCD_Start>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f942 	bl	8007664 <USBD_Get_USB_Status>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	461a      	mov	r2, r3
 80073fc:	4603      	mov	r3, r0
 80073fe:	70fb      	strb	r3, [r7, #3]
 8007400:	460b      	mov	r3, r1
 8007402:	70bb      	strb	r3, [r7, #2]
 8007404:	4613      	mov	r3, r2
 8007406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007416:	78bb      	ldrb	r3, [r7, #2]
 8007418:	883a      	ldrh	r2, [r7, #0]
 800741a:	78f9      	ldrb	r1, [r7, #3]
 800741c:	f7fa fc95 	bl	8001d4a <HAL_PCD_EP_Open>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f91c 	bl	8007664 <USBD_Get_USB_Status>
 800742c:	4603      	mov	r3, r0
 800742e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007430:	7bbb      	ldrb	r3, [r7, #14]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007454:	78fa      	ldrb	r2, [r7, #3]
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f7fa fcde 	bl	8001e1a <HAL_PCD_EP_Close>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 f8fd 	bl	8007664 <USBD_Get_USB_Status>
 800746a:	4603      	mov	r3, r0
 800746c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800746e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7fa fdb6 	bl	8002008 <HAL_PCD_EP_SetStall>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 f8de 	bl	8007664 <USBD_Get_USB_Status>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fa fdfb 	bl	80020d0 <HAL_PCD_EP_ClrStall>
 80074da:	4603      	mov	r3, r0
 80074dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f8bf 	bl	8007664 <USBD_Get_USB_Status>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da0b      	bge.n	8007528 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	333e      	adds	r3, #62	; 0x3e
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	e00b      	b.n	8007540 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	4613      	mov	r3, r2
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800753e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fa fbc8 	bl	8001d00 <HAL_PCD_SetAddress>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f874 	bl	8007664 <USBD_Get_USB_Status>
 800757c:	4603      	mov	r3, r0
 800757e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007580:	7bbb      	ldrb	r3, [r7, #14]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
 8007596:	460b      	mov	r3, r1
 8007598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075a8:	7af9      	ldrb	r1, [r7, #11]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	f7fa fce1 	bl	8001f74 <HAL_PCD_EP_Transmit>
 80075b2:	4603      	mov	r3, r0
 80075b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f853 	bl	8007664 <USBD_Get_USB_Status>
 80075be:	4603      	mov	r3, r0
 80075c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	460b      	mov	r3, r1
 80075da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80075ea:	7af9      	ldrb	r1, [r7, #11]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	f7fa fc5d 	bl	8001eae <HAL_PCD_EP_Receive>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f832 	bl	8007664 <USBD_Get_USB_Status>
 8007600:	4603      	mov	r3, r0
 8007602:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007604:	7dbb      	ldrb	r3, [r7, #22]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	4611      	mov	r1, r2
 8007624:	4618      	mov	r0, r3
 8007626:	f7fa fc8d 	bl	8001f44 <HAL_PCD_EP_GetRxCount>
 800762a:	4603      	mov	r3, r0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800763c:	4b03      	ldr	r3, [pc, #12]	; (800764c <USBD_static_malloc+0x18>)
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20001350 	.word	0x20001350

08007650 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007672:	79fb      	ldrb	r3, [r7, #7]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d817      	bhi.n	80076a8 <USBD_Get_USB_Status+0x44>
 8007678:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <USBD_Get_USB_Status+0x1c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	08007691 	.word	0x08007691
 8007684:	08007697 	.word	0x08007697
 8007688:	0800769d 	.word	0x0800769d
 800768c:	080076a3 	.word	0x080076a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
    break;
 8007694:	e00b      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007696:	2303      	movs	r3, #3
 8007698:	73fb      	strb	r3, [r7, #15]
    break;
 800769a:	e008      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
    break;
 80076a0:	e005      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	73fb      	strb	r3, [r7, #15]
    break;
 80076a6:	e002      	b.n	80076ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076a8:	2303      	movs	r3, #3
 80076aa:	73fb      	strb	r3, [r7, #15]
    break;
 80076ac:	bf00      	nop
  }
  return usb_status;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <memset>:
 80076bc:	4402      	add	r2, r0
 80076be:	4603      	mov	r3, r0
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d100      	bne.n	80076c6 <memset+0xa>
 80076c4:	4770      	bx	lr
 80076c6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ca:	e7f9      	b.n	80076c0 <memset+0x4>

080076cc <__libc_init_array>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	4d0d      	ldr	r5, [pc, #52]	; (8007704 <__libc_init_array+0x38>)
 80076d0:	4c0d      	ldr	r4, [pc, #52]	; (8007708 <__libc_init_array+0x3c>)
 80076d2:	1b64      	subs	r4, r4, r5
 80076d4:	10a4      	asrs	r4, r4, #2
 80076d6:	2600      	movs	r6, #0
 80076d8:	42a6      	cmp	r6, r4
 80076da:	d109      	bne.n	80076f0 <__libc_init_array+0x24>
 80076dc:	4d0b      	ldr	r5, [pc, #44]	; (800770c <__libc_init_array+0x40>)
 80076de:	4c0c      	ldr	r4, [pc, #48]	; (8007710 <__libc_init_array+0x44>)
 80076e0:	f000 f818 	bl	8007714 <_init>
 80076e4:	1b64      	subs	r4, r4, r5
 80076e6:	10a4      	asrs	r4, r4, #2
 80076e8:	2600      	movs	r6, #0
 80076ea:	42a6      	cmp	r6, r4
 80076ec:	d105      	bne.n	80076fa <__libc_init_array+0x2e>
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f4:	4798      	blx	r3
 80076f6:	3601      	adds	r6, #1
 80076f8:	e7ee      	b.n	80076d8 <__libc_init_array+0xc>
 80076fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fe:	4798      	blx	r3
 8007700:	3601      	adds	r6, #1
 8007702:	e7f2      	b.n	80076ea <__libc_init_array+0x1e>
 8007704:	0800778c 	.word	0x0800778c
 8007708:	0800778c 	.word	0x0800778c
 800770c:	0800778c 	.word	0x0800778c
 8007710:	08007790 	.word	0x08007790

08007714 <_init>:
 8007714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007716:	bf00      	nop
 8007718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771a:	bc08      	pop	{r3}
 800771c:	469e      	mov	lr, r3
 800771e:	4770      	bx	lr

08007720 <_fini>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr
